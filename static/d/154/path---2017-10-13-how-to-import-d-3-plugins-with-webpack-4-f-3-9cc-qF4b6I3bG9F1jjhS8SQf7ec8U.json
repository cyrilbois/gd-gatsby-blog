{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"9ad7a7a4-5550-5989-b49b-588df31aa431","excerpt":"Last week I started working on a new visualization and I wanted to include a couple of d3 plugins:  d3-legend  by Susie Lu and  d3-line…","html":"<p>Last week I started working on a new visualization and I wanted to include a couple of d3 plugins: <a href=\"http://d3-legend.susielu.com/\">d3-legend</a> by Susie Lu and <a href=\"https://peterbeshai.com/vis/d3-line-chunked/\">d3-line-chunked</a> by Peter Beshai.</p>\n<p>I spent some time figuring out how to include these plugins with webpack, so I’m writing this small reminder here.</p>\n<p>As far as I know, there are at least 3 ways to import d3 and some plugins.</p>\n<h2>The wrong way to do it</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> d3 <span class=\"token keyword\">from</span> <span class=\"token string\">'d3'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> d3Legend <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-svg-legend'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> d3LineChunked <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-line-chunked'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is bad for 2 reasons:</p>\n<ol>\n<li>we are importing the entire d3 library</li>\n<li>the plugins are not attached to <code class=\"language-text\">d3</code>, so in order to use them we have to do something like this: <code class=\"language-text\">const colorLegend = d3Legend.legendColor()</code>.</li>\n</ol>\n<h2>The lazy way to do it</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> d3Base <span class=\"token keyword\">from</span> <span class=\"token string\">'d3'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> legendColor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-svg-legend'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> lineChunked <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-line-chunked'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// attach all d3 plugins to the d3 library</span>\n<span class=\"token keyword\">const</span> d3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>d3Base<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> legendColor<span class=\"token punctuation\">,</span> lineChunked <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we are still importing the entire d3 library, but now the plugins are attached to the <code class=\"language-text\">d3</code> object. This means that we can use them like this: <code class=\"language-text\">const colorLegend = d3.legendColor()</code>. I have to say that I start writing a visualization with this setup. It’s vey compact and pretty convenient, because we don’t have to worry about which d3 functions/submodules we need.</p>\n<h2>The efficient way to do it</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> select<span class=\"token punctuation\">,</span> selectAll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-selection'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> min<span class=\"token punctuation\">,</span> extent<span class=\"token punctuation\">,</span> range<span class=\"token punctuation\">,</span> descending <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-array'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-format'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> scaleLinear <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-scale'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-request'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// d3 submodule (contains d3.csv, d3.json, etc)</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> legendColor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-svg-legend'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// d3 plugin</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> lineChunked <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'d3-line-chunked'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// d3 plugin</span>\n\n<span class=\"token comment\">// create a Object with only the subset of functions/submodules/plugins that we need</span>\n<span class=\"token keyword\">const</span> d3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> select<span class=\"token punctuation\">,</span>\n    selectAll<span class=\"token punctuation\">,</span>\n    min<span class=\"token punctuation\">,</span>\n    extent<span class=\"token punctuation\">,</span>\n    range<span class=\"token punctuation\">,</span>\n    descending<span class=\"token punctuation\">,</span>\n    format<span class=\"token punctuation\">,</span>\n    scaleLinear<span class=\"token punctuation\">,</span>\n    legendColor<span class=\"token punctuation\">,</span>\n    lineChunked\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>D3 version 4 is not a monolithic library like D3 version 3, but a collection of small modules. This is perfect for a module bundler like Webpack, because it means that we can include in your bundles only the functions that we actually need. As you can see, this is a bit tedious though, that’s why I start with the “lazy way to do it” and change to the “efficient way to do it” only when my visualization is basically finished.</p>","frontmatter":{"title":"How to import d3 plugins with Webpack","date":"October 13, 2017"}}},"pageContext":{"slug":"/2017-10-13-how-to-import-d3-plugins-with-webpack/","previous":{"fields":{"slug":"/2017-09-10-a-simple-git-hook-for-your-python-projects/"},"frontmatter":{"title":"A simple git hook for your Python projects"}},"next":{"fields":{"slug":"/2017-10-14-a-5-minute-intro-to-hypothesis/"},"frontmatter":{"title":"A 5 minute Intro to Hypothesis"}}}}