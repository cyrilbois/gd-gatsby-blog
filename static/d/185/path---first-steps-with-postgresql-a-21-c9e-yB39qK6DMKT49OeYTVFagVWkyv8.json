{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"e4e21e06-221f-5f48-881c-2c0472fd2a9e","excerpt":"In a Django project, PostgreSQL is probably the most popular choice when it comes to deploy a database for a production environment. In this…","timeToRead":5,"html":"<p>In a Django project, PostgreSQL is probably the most popular choice when it comes to deploy a database for a production environment. In this article I’ll go through the necessary steps to set it up on Ubuntu, along with a list of some basic commands to create databases and tables, as well as manage <em>roles</em> (i.e. users).</p>\n<p>Here I will create a new role called <code class=\"language-text\">test_user</code> and a new database called <code class=\"language-text\">test_db</code>. You can pick different names if you want, but try to avoid mixing lowercase/uppercase. This is because if you create a user with a mix of lowercase and uppercase characters (e.g. <code class=\"language-text\">test_User</code>) you will need to type the double quotation marks every time.</p>\n<h2>Dependencies</h2>\n<p>To satisfy the dependencies of the operative system, open a terminal and type:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sudo apt-get install postgresql postgresql-contrib libpq-dev python-dev</code></pre></div>\n<p>For the python dependencies, I’d suggest to create a virtual environment with <a href=\"https://virtualenv.pypa.io/en/stable/\">virtualenv</a>, or even better with <a href=\"http://www.giacomodebidda.com/blog/virtual-environments-with-virtualenvwrapper/\">virtualenvwrapper</a>, and install the <code class=\"language-text\">psycopg2</code> driver:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip install psycopg2</code></pre></div>\n<h2>The postgres shell</h2>\n<p><code class=\"language-text\">psql</code> is the interactive terminal for working with PostgreSQL. You can launch it with <code class=\"language-text\">sudo -i -u postgres</code> and then <code class=\"language-text\">psql</code>.</p>\n<p>Here are some useful commands when using the <code class=\"language-text\">psql</code> shell:</p>\n<ul>\n<li><strong>\\du</strong> list all roles (namely the users) and their privileges;</li>\n<li><strong>\\l</strong> list all databases, their owners and access privileges;</li>\n<li><strong>\\c [DB NAME]</strong> connect to the <strong>[DB NAME]</strong> database with the user currently logged in;</li>\n<li><strong>\\d</strong> list all the tables of the database you are currently connected to;</li>\n<li><strong>\\d [TABLE NAME]</strong> show the schema of the table <strong>[TABLE NAME]</strong>, of the database you are currently connected to;</li>\n<li><strong>\\h</strong> help on SQL commands;</li>\n<li><strong>?</strong> help on psql commands;</li>\n<li><strong>\\conninfo</strong> show some information about the current database connection (db name and user name);</li>\n<li><strong>\\q</strong> exit the psql shell.</li>\n</ul>\n<h2>Create a new user (aka role)</h2>\n<p>PostgreSQL comes with a default user called <code class=\"language-text\">postgres</code>, which is the root user. Let’s create a new user.</p>\n<p>As user <code class=\"language-text\">postgres</code>, exit the <code class=\"language-text\">psql</code> shell and type:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">createuser --interactive</code></pre></div>\n<p>Choose a username (e.g. <code class=\"language-text\">test_user</code>) and decide wheter this user should be a superuser, should be allowed to create new databases and/or new roles.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Enter name of role to add: test_user\nShall the new role be a superuser? (y/n) n\nShall the new role be allowed to create databases? (y/n) y\nShall the new role be allowed to create more new roles? (y/n) y</code></pre></div>\n<p>If you want to check that the user was created correctly, go back to the <code class=\"language-text\">psql</code> shell and type <code class=\"language-text\">\\du</code>.</p>\n<h2>Assign a password to your new user</h2>\n<p>In the <code class=\"language-text\">psql</code> shell, type:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">USER</span> test_user <span class=\"token keyword\">WITH</span> PASSWORD <span class=\"token string\">'test_password'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Don’t forget the semi-colon and <a href=\"http://blog.lerner.co.il/quoting-postgresql/\">avoid double quotation marks</a>.</p>\n<h2>Create a database</h2>\n<p>In the <code class=\"language-text\">psql</code> shell, as user <code class=\"language-text\">postgres</code>, type:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> test_db<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This command creates a new database called <code class=\"language-text\">test_db</code>. At this moment, only the user <code class=\"language-text\">postgres</code> can perform operations on this database.</p>\n<h2>Create a table</h2>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> items<span class=\"token punctuation\">(</span>\n    item_id <span class=\"token keyword\">serial</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n    item_description <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    item_added <span class=\"token keyword\">timestamp</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Assign privileges to <code class=\"language-text\">test_user</code></h2>\n<p>You need to allow your new user to modify the content of the <code class=\"language-text\">test_db</code> database. In order to do so you will need to grant him privileges on the database itself, and on the tables available in the database.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">DATABASE</span> test_db <span class=\"token keyword\">TO</span> test_user<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The main reason to grant privileges on the database is to allow or revoke the connection to the database, but in order to allow for changes in the content of the database itself, the user <code class=\"language-text\">test_user</code> needs the privileges on all the tables he is allowed to modify. So, if you want to allow <code class=\"language-text\">test_user</code> to edit the contents of the table <code class=\"language-text\">items</code>, connect to the database with <code class=\"language-text\">\\c test_db</code> and assign the privileges with:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">TABLE</span> items <span class=\"token keyword\">TO</span> test_user<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead of typing the two aforementioned commands, you can achieve the same result with a single command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">ON</span> items <span class=\"token keyword\">TO</span> test_user<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, now <code class=\"language-text\">test_user</code> can connect to <code class=\"language-text\">test_db</code> and change its content. If he is the only user allowed to work on this database, it make sense to make him the owner:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">DATABASE</span> test_db OWNER <span class=\"token keyword\">TO</span> test_user<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Connect to <code class=\"language-text\">test_db</code> with <code class=\"language-text\">test_user</code></h2>\n<p>You are still connected as user <code class=\"language-text\">postgres</code>. Exit the <code class=\"language-text\">psql</code> shell with <code class=\"language-text\">\\q</code> and log in with <code class=\"language-text\">test_user</code> (you will need to type the password).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">psql -h localhost -U test_user -d test_db</code></pre></div>\n<p>Here is what you should see if you type <code class=\"language-text\">\\conninfo</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">test_db=&gt; \\conninfo\nYou are connected to database &quot;test_db&quot; as user &quot;test_user&quot; on host &quot;localhost&quot; at port &quot;5432&quot;.\nSSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)</code></pre></div>\n<h2>Cleanup</h2>\n<p>Probably you don’t want to keep the user, the database and the table we have just created, so let’s remove them. Keep in mind that you cannot drop an open database, nor you can drop it if you are not the database owner or a superuser. So, exit the <code class=\"language-text\">psql</code> shell and re-log into it as user <code class=\"language-text\">postgres</code> (you just have to type <code class=\"language-text\">psql</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> items<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">DATABASE</span> test_db<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">USER</span> test_user<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>References</h2>\n<p>Here are some additional resources:</p>\n<ul>\n<li><a href=\"http://postgresguide.com/utilities/psql.html\">psql</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-postgresql-on-an-ubuntu-vps\">How to secure PostgreSQL on a Ubuntu VPS</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-back-up-restore-and-migrate-postgresql-databases-with-barman-on-centos-7\">backup and restore postgreSQL databases with Barman</a></li>\n</ul>","frontmatter":{"title":"First steps with PostgreSQL","date":"March 13, 2017","tags":["PostgreSQL"]}}},"pageContext":{"slug":"/first-steps-with-postgresql/","previous":{"fields":{"slug":"/multiply-your-python-unit-test-cases-with-ddt/"},"timeToRead":3,"frontmatter":{"title":"Multiply your Python Unit Test Cases with DDT","path":"/multiply-your-python-unit-test-cases-with-ddt/"}},"next":{"fields":{"slug":"/mvc-pattern-in-python-introduction-and-basicmodel/"},"timeToRead":14,"frontmatter":{"title":"MVC pattern in Python: Introduction and BasicModel","path":"/mvc-pattern-in-python-introduction-and-basicmodel/"}}}}