{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"44fe9b16-45c3-5278-8f7d-785c19127c37 >>> MarkdownRemark","excerpt":"DDT (Data-Driven Tests) is a small python module that allows you to multiply your unit test cases for free.\nThe idea is pretty simple: you…","html":"<p>DDT (Data-Driven Tests) is a small python module that allows you to multiply your unit test cases for free.\nThe idea is pretty simple: you write a single test case and define some data samples, and DDT will generate a test case for each sample you provided.</p>\n<p>You might ask: <em>“Why is that useful?”</em></p>\n<p>Consider the following example, a simple test case without using DDT.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestWithoutDDT</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_without_ddt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you run this test you will get the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Failure\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"/home/jack/Repos/design-patterns/test_ddt.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> test_without_ddt\n    self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">not</span> greater than <span class=\"token number\">0</span></code></pre></div>\n<p>The test failed as soon as it asserted that <code class=\"language-text\">-2</code> is greater than <code class=\"language-text\">0</code> and then stopped. It didn’t consider <code class=\"language-text\">3</code>, <code class=\"language-text\">4</code>, or <code class=\"language-text\">-5</code>, so you don’t don’t whether the test would have passed for those inputs or not.</p>\n<p>Now take a look at a very similar test with <code class=\"language-text\">DDT</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> idata<span class=\"token punctuation\">,</span> file_data<span class=\"token punctuation\">,</span> unpack\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDDTData</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @data<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_with_ddt_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you run this test you will get two distinct failures, for <code class=\"language-text\">-2</code> and <code class=\"language-text\">-5</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">Failure\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"/home/jack/.virtualenvs/design-patterns/lib/python3.5/site-packages/ddt.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> wrapper\n    <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/home/jack/Repos/design-patterns/test_ddt.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> test_with_ddt_data\n    self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token operator\">not</span> greater than <span class=\"token number\">0</span>\n\nFailure\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"/home/jack/.virtualenvs/design-patterns/lib/python3.5/site-packages/ddt.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> wrapper\n    <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/home/jack/Repos/design-patterns/test_ddt.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> test_with_ddt_data\n    self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nAssertionError<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">not</span> greater than <span class=\"token number\">0</span></code></pre></div>\n<p>This means that <strong>all of the inputs were tested</strong>, and two of them failed. Now you know why DDT is so cool!</p>\n<p>It takes less than 2 minutes to read the <a href=\"https://ddt.readthedocs.io/en/latest/example.html\">documentation</a>, and the examples are great!</p>\n<p>The main reason why I like DDT is that it’s very easy to use: just decorate a test class with the <code class=\"language-text\">@ddt</code> decorator, and every test case you want with one of the decorators provided by this module. Here are the decorators available:</p>\n<ul>\n<li><code class=\"language-text\">@data</code>: contains as many arguments as the values you want to feed to the test. This values can be numbers, strings, tuples, etc. In the case of tuples, a cool feature is that you can <code class=\"language-text\">@unpack</code> them.</li>\n<li><code class=\"language-text\">@file_data</code>: loads the test data from a JSON or YAML file.</li>\n<li><code class=\"language-text\">@idata</code>: generates a new data sample from a generator function you defined somewhere in the code. (At this moment this decorator is not mentioned in the documentation).</li>\n</ul>\n<p>Here is an example with a generator function and <code class=\"language-text\">@idata</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> idata\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">number_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> x\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDDTGenerator</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @idata<span class=\"token punctuation\">(</span>number_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_with_ddt_idata</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And here an example where the data is stored in an external file (JSON):</p>\n<p><em>mydatafile.json</em></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> file_data\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDDTDataFile</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @file_data<span class=\"token punctuation\">(</span><span class=\"token string\">'mydatafile.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_with_ddt_file_data</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertGreater<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, an example where the data in unpacked:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> unpack\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDDTDataUnpack</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'answer'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_with_ddt_data_unpack</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> some_string<span class=\"token punctuation\">,</span> some_integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertIsInstance<span class=\"token punctuation\">(</span>some_string<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>assertIsInstance<span class=\"token punctuation\">(</span>some_integer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Alternatives to DDT</h2>\n<p>The idea of test generators is not new, and there are at least two modules with similar capabilities: <a href=\"https://github.com/box/genty/blob/master/README.rst\">genty</a> and <a href=\"https://pypi.python.org/pypi/unittest-data-provider/1.0.0\">data-provider</a>. I opted for DDT because it seems better documented and more pythonic, but genty looks pretty good too. In particular, the <code class=\"language-text\">@genty_repeat</code> decorator might be a nice feature that is not available in DDT(even if one could probably obtain the same functionality by using the <a href=\"https://pypi.python.org/pypi/retrying\">retrying</a> module).</p>","frontmatter":{"title":"Multiply your Python Unit Test Cases with DDT","date":"March 13, 2017"}}},"pageContext":{"slug":"/2017-03-13-multiply-your-python-unit-test-cases-with-ddt/","previous":{"fields":{"slug":"/2017-03-13-factory-method-and-abstract-factory-in-python/"},"frontmatter":{"title":"Factory Method and Abstract Factory in Python"}},"next":{"fields":{"slug":"/2017-03-13-first-steps-with-postgresql/"},"frontmatter":{"title":"First steps with PostgreSQL"}}}}