{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"eb403905-e8af-57c3-aa5e-5b76a6820a02","excerpt":"A  git hook  is a script that git executes before or after a relevant git event or action is triggered. The hooks are stored in the…","timeToRead":1,"html":"<p>A <a href=\"http://githooks.com/\">git hook</a> is a script that git executes before or after a relevant git event or action is triggered. The hooks are stored in the <code class=\"language-text\">.git/hooks</code> directory of your repository, which is created automatically when you run <code class=\"language-text\">git init</code>.</p>\n<p>Git hooks can be really useful to enforce a certain policy on your commits, push your changes to a continuous integration server, or automatically deploy your code.</p>\n<p>I wanted to enforce a very simple policy for my commits: <em>no broken code should be deployed on the master branch</em>. So I wrote this small <code class=\"language-text\">pre-commit</code> hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">#!/bin/sh\ncurrent_branch=`git branch | grep &#39;*&#39; | sed &#39;s/* //&#39;`\n\nif [ &quot;$current_branch&quot; = &quot;master&quot; ]; then\n    echo &quot;You are about to commit on master. I will run your tests first...&quot;\n    python -m unittest discover tests\n    if [ $? -eq 0 ]; then\n        # tests passed, proceed to prepare commit message\n        exit 0\n    else\n        # some tests failed, prevent from committing broken code on master\n        echo &quot;Some tests failed. You are not allowed to commit broken code on master! Aborting the commit.&quot;\n        echo &quot;Note: you can still commit broken code on feature branches&quot;\n        exit 1\n    fi\nfi</code></pre></div>\n<p>It’s a simple <em>client side hook</em> that runs all of my Python tests before committing on <code class=\"language-text\">master</code>. I can still create a feature branch and commit broken code on that, but as soon as I try to merge the feature branch into master, all test run. If any of the tests fails I can’t commit. Simple as that.</p>\n<p>Git hooks are language agnostic. I wrote this small hook as a shell script, but you can use other languages liek Perl, Ruby or Python. <a href=\"https://github.com/bahattincinic/python-git-hook/blob/master/pre-commit\">Here</a> is an example of a <code class=\"language-text\">pre-commit</code> hook in written in Python.</p>","frontmatter":{"title":"A simple git hook for your Python projects","date":"September 10, 2017"}}},"pageContext":{"slug":"/a-simple-git-hook-for-your-python-projects/","previous":{"fields":{"slug":"/visualize-earthquakes-with-plotly-dash/"},"timeToRead":9,"frontmatter":{"title":"Visualize Earthquakes with Plotly Dash","path":"/visualize-earthquakes-with-plotly-dash/"}},"next":{"fields":{"slug":"/how-to-import-d3-plugins-with-webpack/"},"timeToRead":2,"frontmatter":{"title":"How to import d3 plugins with Webpack","path":"/how-to-import-d3-plugins-with-webpack/"}}}}