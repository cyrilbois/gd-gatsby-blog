{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"1fdf9155-1050-5998-8741-9f4df5c89495","excerpt":"Here is an unordered list of git commands, configurations, tricks, articles, gotchas that I don’t want to forget. Find out all commit hashes…","timeToRead":6,"html":"<p>Here is an unordered list of git commands, configurations, tricks, articles, gotchas that I don’t want to forget.</p>\n<ul>\n<li>Find out all commit hashes of the git submodules your branch is pointing at</li>\n<li>Find commit by message string</li>\n<li>Show all commits from an author, in a specified date range</li>\n<li>Fix <code class=\"language-text\">.git/index.lock</code> error</li>\n<li>Permanently remove a file from a repo</li>\n<li>Show branch name in Linux terminal</li>\n<li>Compare a file across 2 branches</li>\n<li>List all commits for a specific file</li>\n<li>Configure git aliases</li>\n<li>Commit only part of a file</li>\n<li>Git hooks</li>\n<li>Discard changes to git submodules</li>\n</ul>\n<hr>\n<h2>Find out all commit hashes of the git submodules your branch is pointing at</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git ls-tree &lt;branch you are currently on&gt;:&lt;path to directory containing the submodules&gt;</code></pre></div>\n<p><em>Example</em></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git ls-tree master:external</code></pre></div>\n<p>Reference <a href=\"https://stackoverflow.com/a/5033973\">here</a></p>\n<h2>Find commit by message string</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git log --all --grep=&quot;your commit message here (or part of it)&quot;</code></pre></div>\n<p>Use <code class=\"language-text\">--all</code> to search across all branches. Don’t use it if you want to restrict the search to the branch you are currently on.</p>\n<p>Reference <a href=\"https://stackoverflow.com/a/7124949\">here</a></p>\n<h2>Show all commits from an author, in a specified date range</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2016-01-31&quot; --until=&quot;2017-12-01&quot; --author=&quot;John Doe&quot;</code></pre></div>\n<p>Reference <a href=\"https://stackoverflow.com/a/42795304/3036129\">here</a> and <a href=\"https://git-scm.com/book/it/v2/Git-Basics-Viewing-the-Commit-History\">here</a></p>\n<h2>Fix <code class=\"language-text\">.git/index.lock</code></h2>\n<p>I get this from time to time, and I still haven’t figured out the reason why it occurs.\nYou just have to remove the <code class=\"language-text\">index.lock</code> file (not the index!).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">rm .git/index.lock</code></pre></div>\n<p>Reference <a href=\"https://robots.thoughtbot.com/how-to-fix-rm-f-git-index\">here</a></p>\n<h2>Permanently remove a file from a repo</h2>\n<p>You should really think twice before performing this operation. Also, keep in mind that this command will override git history.</p>\n<p>Anyway, there are some real use cases when this command is useful.</p>\n<p>Let’s say that you commit a large file by mistake. You have some stuff to commit and you run a convenient <code class=\"language-text\">git add .</code> to stash all your changes. Then you forget to review your changes and those changes end up in the commit history. At this point you are still on a local branch, so you can still save the day by removing the file, stashing your changes once again and running a <code class=\"language-text\">git commit --amend</code>. If you realize your mistake some commits later, but you have not yet pushed them, you can also <a href=\"https://www.giacomodebidda.com/squashing-git-commits/\">squash your commits</a>. But if you have already pushed to your remote repository you are out of luck, and that’s when this command could help you.</p>\n<p>Let’s suppose that at some point in time you created a <code class=\"language-text\">README.md</code> for your project, but for some esoteric reason you want to remove it from your project. You can permanently remove your <code class=\"language-text\">README.md</code> file and make it disappear from your git history with the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git filter-branch --tree-filter &#39;rm -rf README.md&#39; HEAD</code></pre></div>\n<p>If you now run <code class=\"language-text\">git status</code>, you will notice that your local branch and your remote branch differ. That’s because your remote branch still has a <code class=\"language-text\">README.md</code> in its history.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jack@ThinkJack:~/Repos/d3-visualizations(master)$ git status\nOn branch master\nYour branch and &#39;origin/master&#39; have diverged,\nand have 26 and 26 different commits each, respectively.\n  (use &quot;git pull&quot; to merge the remote branch into yours)</code></pre></div>\n<p>Now you have to push your changes to the remote repo. You have to use <code class=\"language-text\">--force</code>, since this is not a fast-forward commit and you have to rewrite the history of the remote repo.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git push origin master --force</code></pre></div>\n<p>Reference <a href=\"https://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository\">here</a></p>\n<h2>Show branch name in Linux terminal</h2>\n<p>For this, you have to edit your <code class=\"language-text\">.bashrc</code> file. It should be in your <code class=\"language-text\">home</code> directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">parse_git_branch() {\n git branch 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \\(.*\\)/(\\1)/&#39;\n}\nif [ &quot;$color_prompt&quot; = yes ]; then\n PS1=&#39;${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[01;31m\\]$(parse_git_branch)\\[\\033[00m\\]\\$ &#39;\nelse\n PS1=&#39;${debian_chroot:+($debian_chroot)}\\u@\\h:\\w$(parse_git_branch)\\$ &#39;\nfi\nunset color_prompt force_color_prompt</code></pre></div>\n<p>Reference <a href=\"https://www.leaseweb.com/labs/2013/08/git-tip-show-your-branch-name-on-the-linux-prompt/\">here</a></p>\n<h2>Compare a file across 2 branches</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git difftool &lt;target branch&gt; -- &lt;your file&gt;</code></pre></div>\n<p>For example, if you are on <code class=\"language-text\">master</code> and want to check a file on your <code class=\"language-text\">release-01.03.02</code> branch, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git difftool release-01.03.02 -- src/js/index.js</code></pre></div>\n<p>Reference <a href=\"https://stackoverflow.com/a/4099805/3036129\">here</a>, and if your file has a different name in 2 different branches, see <a href=\"https://stackoverflow.com/a/8131164/3036129\">here</a>.</p>\n<h2>List all commits for a specific file</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git log --follow filename</code></pre></div>\n<p>Reference <a href=\"https://stackoverflow.com/a/8808453/3036129\">here</a></p>\n<p>Configure Git aliases\nYou can use <code class=\"language-text\">git config</code> to create your aliases, but there is a faster way.\nAdd (or edit) the <code class=\"language-text\">alias</code> section of your <code class=\"language-text\">.gitconfig</code> file. It should be in your <code class=\"language-text\">home</code> directory.</p>\n<p>These is the <code class=\"language-text\">alias</code> section in my <code class=\"language-text\">.gitconfig</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">[alias]\n    st = status\n    au = add -u\n    dt = difftool\n    cm = commit -m\n    cma = commit --amend  --no-edit\n    co = checkout\n    # list aliases https://gist.github.com/mwhite/6887990\n    la = &quot;!git config -l | grep alias | cut -c 7-&quot;</code></pre></div>\n<p>For some other Git aliases, see <a href=\"https://git.wiki.kernel.org/index.php/Aliases\">this wiki</a>.</p>\n<p>Reference <a href=\"https://gist.github.com/mwhite/6887990\">here</a> and <a href=\"https://git-scm.com/book/it/v2/Git-Basics-Git-Aliases\">here</a></p>\n<h2>Commit only part of a file</h2>\n<p>You can use <code class=\"language-text\">git gui</code> for this. If you don’t have it already, install it with <code class=\"language-text\">sudo apt-get install git-gui</code>. Here is what I usually do:</p>\n<ol>\n<li><code class=\"language-text\">git gui</code></li>\n<li>right click on the code you want to commit and select <code class=\"language-text\">stage lines for commit</code> (or <code class=\"language-text\">stage hunk for commit</code>)</li>\n<li><code class=\"language-text\">git stash</code>, to save in the stash all changes that I am not committing right now</li>\n<li><code class=\"language-text\">git commit</code></li>\n<li><code class=\"language-text\">git stash apply</code></li>\n<li><code class=\"language-text\">git stash drop</code></li>\n</ol>\n<p>If you like (I personally don’t), you can replace</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git stash apply\ngit stash drop</code></pre></div>\n<p>with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git stash pop</code></pre></div>\n<p>Reference <a href=\"http://stackoverflow.com/a/16137932\">here</a>.</p>\n<p>In alternative to <code class=\"language-text\">git gui</code>, you can use <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging\">interactive staging from the terminal</a>. I have never tried this.</p>\n<h2>Git hooks</h2>\n<p>I am not an expert on hooks in Git, but I found this really <a href=\"http://blog.ittybittyapps.com/blog/2013/09/03/git-pre-push/\">nice article about them</a>.</p>\n<p>I think the most useful hooks are</p>\n<ul>\n<li>pre-push</li>\n<li>prepare-commit-msg</li>\n<li>post-commit</li>\n</ul>\n<p>It would be nice to have a pre-merge hook, so we could prevent a feature branch from merging into master if certain conditions are not met (e.g. your tests fail). Since a pre-merge hook is not available, you’ll have to [write it]((<a href=\"https://stackoverflow.com/questions/19102714/how-would-i-write-a-pre-merge-hook-in-git\">https://stackoverflow.com/questions/19102714/how-would-i-write-a-pre-merge-hook-in-git</a>).</p>\n<p>Reference <a href=\"https://www.atlassian.com/git/tutorials/git-hooks\">here</a>.</p>\n<h2>Discard changes to Git submodules</h2>\n<p>I think it happened only once to me, but I had to reset all submodules with this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git submodule foreach git reset --hard</code></pre></div>\n<p>Reference <a href=\"https://kalyanchakravarthy.net/blog/git-discard-submodule-changes/\">here</a>.</p>","frontmatter":{"title":"My personal Git Memo","date":"July 20, 2017"}}},"pageContext":{"slug":"/my-personal-git-memo/","previous":{"fields":{"slug":"/getting-started-with-webpack-and-es6/"},"timeToRead":8,"frontmatter":{"title":"Getting started with Webpack and ES6","path":"/getting-started-with-webpack-and-es6/"}},"next":{"fields":{"slug":"/pipenv/"},"timeToRead":8,"frontmatter":{"title":"Pipenv","path":"/pipenv/"}}}}