{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"365d343d-296c-50f0-9569-7b750e5a12db >>> MarkdownRemark","excerpt":"Let’s say you have a Python module called   where you have a function called   that you want to test. This function adds two numbers, so…","html":"<p>Let’s say you have a Python module called <code class=\"language-text\">example.py</code> where you have a function called <code class=\"language-text\">add_numbers</code> that you want to test.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>return</span></span><span>&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>+</span></span><span>&nbsp;</span><span>b</span></span></div></pre>\n<p>This function adds two numbers, so among other things you might want to check that the commutative property holds for all the inputs that the function receives. You create a file called <code class=\"language-text\">test_example.py</code> and start writing a simple unit test to prove it.</p>\n<h2>A simple unit test</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>unittest</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>your_python_module</span><span>.</span><span>example</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>add_numbers</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>TestAddNumbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span>unittest</span><span>.</span><span>TestCase</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numers_is_commutative</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>assertEqual</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>1.23</span></span><span>,&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>4.56</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>,&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>4.56</span></span><span>,&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>1.23</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>unittest</span><span>.</span><span>main</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>That’s cool, but you actually didn’t prove that the commutative property holds in general. You have just proved that <em>for this specific case</em> such property holds.</p>\n<p>You realize that the combination of <code class=\"language-text\">1.23</code> and <code class=\"language-text\">4.56</code> is a very tiny subset of the entire input space of numbers that your function can receive, so you write more tests.</p>\n<h2>A common solution: write more test cases</h2>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;more&nbsp;tests&nbsp;here...</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numers_is_commutative_another_case</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>assertEqual</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>0.789</span></span><span>,&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--integer syntax--decimal syntax--python\"><span>321</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>,&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--constant syntax--numeric syntax--integer syntax--decimal syntax--python\"><span>321</span></span><span>,&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>0.789</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;more&nbsp;tests&nbsp;here...</span></span></span></div></pre>\n<p>Not a huge gain. You have just proved that <em>for these other specific cases</em> that you wrote the commutative property holds. And obviously you don’t want to write a million test cases by hand.</p>\n<p>Maybe you have heard about <a href=\"https://en.wikipedia.org/wiki/Fuzzing\">fuzzing</a>, and you want to use it to create random test cases every time you run the test.</p>\n<h2>A better solution: fuzzing and ddt</h2>\n<p>You can create a pair of random floats, so every time you run the test you have a new test case. That’s a bit dangerous though, because if you have a failure you cannot reproduce it easily.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>random</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>unittest</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>TestAddNumbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span>unittest</span><span>.</span><span>TestCase</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numers_is_commutative</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>random</span><span>.</span><span>random</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>*</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>10.0</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>random</span><span>.</span><span>random</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>*</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>10.0</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>assertEqual</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>,&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>unittest</span><span>.</span><span>main</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>You can also use a library called <a href=\"https://www.giacomodebidda.com/multiply-your-python-unit-test-cases-with-ddt/\">ddt</a> to generate many random test cases.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>random</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>unittest</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>ddt</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>ddt</span><span>,&nbsp;</span><span>idata</span><span>,&nbsp;</span><span>unpack</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>float_pairs_generator</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>num_test_cases</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--integer syntax--decimal syntax--python\"><span>100</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--repeat syntax--python\"><span>for</span></span><span>&nbsp;</span><span>i</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>in</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span class=\"syntax--support syntax--function syntax--builtin syntax--python\"><span>range</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>num_test_cases</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>random</span><span>.</span><span>random</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>*</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>10.0</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>b</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>random</span><span>.</span><span>random</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>*</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>10.0</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>yield</span></span><span>&nbsp;</span><span>(</span><span>a</span><span>,&nbsp;</span><span>b</span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>ddt</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>TestAddNumbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span>unittest</span><span>.</span><span>TestCase</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>idata</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>float_pairs_generator</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>unpack</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_floats_ddt</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>assertEqual</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>,&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>unittest</span><span>.</span><span>main</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>Here the <code class=\"language-text\">float_pairs_generator</code> generator function creates 100 random pairs of floats. With this trick you can multiply the number of test cases while keeping your tests easy to maintain.</p>\n<p>That’s definitely a step in the right direction, but if you think about it we are still testing some random combinations of numbers between 0.0 and 10.0 here. Not a very extensive portion of the input domain of the function <code class=\"language-text\">add_numbers</code>.</p>\n<p>You have two options:</p>\n<ol>\n<li>find a way to generate <em>domain objects</em> that your function can accept. In this case the domain objects are the floats that <code class=\"language-text\">add_numbers</code> can receive.</li>\n<li>use hypothesis</li>\n</ol>\n<p>I don’t know about you, but I’m going for the second one.</p>\n<h2>The best solution: Hypothesis</h2>\n<p>Here is how you write a test that checks that the commutative property holds for a pair of floats.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>given</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>.</span><span>strategies</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>floats</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>your_python_module</span><span>.</span><span>example</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>add_numbers</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>given</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>assert</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>test_add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>When I ran this test I was shocked. It failed!</p>\n<p>WTF! How it that possible that this test fails, after I have tried 100 test cases with ddt?</p>\n<p>Luckily with hypothesis you can increase the verbosity level of your test by using the <code class=\"language-text\">@settings</code> decorator.</p>\n<p>Let’s say you also want to test a specific test case: <code class=\"language-text\">a == 1.23</code> and <code class=\"language-text\">b == 4.56</code>. For this you can use the <code class=\"language-text\">@example</code> decorator. This is nice because now your test provides some <em>documentation</em> to anyone who wants to use the <code class=\"language-text\">add_numbers</code> function, and at the same time you are testing a specific case that you know about or that might be particularly hard to hit.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>given</span><span>,&nbsp;</span><span>example</span><span>,&nbsp;</span><span>settings</span><span>,&nbsp;</span><span>Verbosity</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>.</span><span>strategies</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>floats</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>your_python_module</span><span>.</span><span>example</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>add_numbers</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>settings</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>verbosity</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>Verbosity</span><span>.</span><span>verbose</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>example</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>1.23</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--numeric syntax--float syntax--python\"><span>4.56</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>given</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>assert</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>test_add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>Obviously the test fails again, but this time you get more insights about it.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=1.23,&nbsp;b=4.56)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=nan)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;#&nbsp;Traceback&nbsp;here...</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>AssertionError</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=nan)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Traceback&nbsp;(most&nbsp;recent&nbsp;call&nbsp;last):</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>&nbsp;&nbsp;#&nbsp;Traceback&nbsp;here...</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>AssertionError</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=1.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=4293918720.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=281406257233920.0)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=7.204000185188352e+16)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>Trying&nbsp;example:&nbsp;test_add_numbers(a=0.0,&nbsp;b=inf)</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>#&nbsp;more&nbsp;test&nbsp;cases...</span></span></div><div class=\"line\"><span class=\"syntax--text syntax--plain syntax--null-grammar\"><span>You&nbsp;can&nbsp;add&nbsp;@seed(247616548810050264291730850370106354271)&nbsp;to&nbsp;this&nbsp;test&nbsp;to&nbsp;reproduce&nbsp;this&nbsp;failure.</span></span></div></pre>\n<p>That’s really helpful. You can see all the test case that were successful and the ones that caused a failure. You get also a <code class=\"language-text\">seed</code> that you can use to reproduce this very specific failure at a later time or on a different computer. This is so awesome.</p>\n<p>Anyway, why does this test fail? It fails because in Python <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> are valid floats, so the function <code class=\"language-text\">floats()</code> might create some test cases that have <code class=\"language-text\">a == nan</code> and/or <code class=\"language-text\">b == inf</code>.</p>\n<p>Are <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> valid inputs for your application? Maybe. It depends on your application.</p>\n<p>If you are absolutely sure that <code class=\"language-text\">add_numbers</code> will never receive a <code class=\"language-text\">nan</code> or a <code class=\"language-text\">inf</code> as inputs, you can write a test that never generates either <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code>. You just have to set <code class=\"language-text\">allow_nan</code> and <code class=\"language-text\">allow_infinity</code> to <code class=\"language-text\">False</code> in the <code class=\"language-text\">@given</code> decorator. Easy peasy.</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>given</span><span>,&nbsp;</span><span>example</span><span>,&nbsp;</span><span>settings</span><span>,&nbsp;</span><span>Verbosity</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>.</span><span>strategies</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>floats</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>your_python_module</span><span>.</span><span>example</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>add_numbers</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>given</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span>&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>allow_nan</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>False</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>allow_infinity</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>False</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span>&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>allow_nan</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>False</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>allow_infinity</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>False</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>assert</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>test_add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>But what if <code class=\"language-text\">add_numbers</code> could in fact receive <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code> as inputs (a much more realistic assumption). In this case the test should be able to generate <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code>, your function should raise specific exceptions that you will have to handle somewhere else in your application, and the test should not consider <em>such specific exceptions</em> as failures.</p>\n<p>Here is how <code class=\"language-text\">example.py</code> might look:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>math</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>NaNIsNotAllowed</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span class=\"syntax--support syntax--type syntax--exception syntax--python\"><span>ValueError</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>pass</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>InfIsNotAllowed</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span class=\"syntax--support syntax--type syntax--exception syntax--python\"><span>ValueError</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>pass</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>math</span><span>.</span><span>isnan</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>or</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>math</span><span>.</span><span>isnan</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--exception syntax--python\"><span>raise</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>NaNIsNotAllowed</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>nan&nbsp;is&nbsp;not&nbsp;a&nbsp;valid&nbsp;input</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>elif</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>math</span><span>.</span><span>isinf</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>or</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>math</span><span>.</span><span>isinf</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--exception syntax--python\"><span>raise</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>InfIsNotAllowed</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>inf&nbsp;is&nbsp;not&nbsp;a&nbsp;valid&nbsp;input</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>return</span></span><span>&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>+</span></span><span>&nbsp;</span><span>b</span></span></div></pre>\n<p>And here is how you write the test with hypothesis:</p>\n<pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;test_example.py</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>given</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>hypothesis</span><span>.</span><span>strategies</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>floats</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--from syntax--python\"><span>from</span></span><span>&nbsp;</span><span>your_python_module</span><span>.</span><span>example</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>add_numbers</span><span>,&nbsp;</span><span>NaNIsNotAllowed</span><span>,&nbsp;</span><span>InfIsNotAllowed</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--decorator syntax--python\"><span class=\"syntax--entity syntax--name syntax--function syntax--decorator syntax--python\"><span>@</span><span>given</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--decorator syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>floats</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>test_add_numbers</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--exception syntax--python\"><span>try</span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>assert</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>b</span><span>,&nbsp;</span><span>a</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--exception syntax--python\"><span>except</span></span><span>&nbsp;</span><span>(</span><span>NaNIsNotAllowed</span><span>,&nbsp;</span><span>InfIsNotAllowed</span><span>)</span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>reject</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>test_add_numbers</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre>\n<p>This test will generate some <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> inputs, <code class=\"language-text\">add_numbers</code> will raise either <code class=\"language-text\">NaNIsNotAllowed</code> or <code class=\"language-text\">InfIsNotAllowed</code> and the test will catch these exceptions and reject them as test failures (i.e. the test case will be considered a success when either <code class=\"language-text\">NaNIsNotAllowed</code> or <code class=\"language-text\">InfIsNotAllowed</code> occurs).</p>\n<p>Can you really afford to reject <code class=\"language-text\">nan</code> as an input value for <code class=\"language-text\">add_numbers</code>? Maybe not. Let’s say your code needs to sum two samples in a time series, and one sample of the time series is missing: <code class=\"language-text\">nan</code> would be a perfectly valid input for <code class=\"language-text\">add_numbers</code> in such case.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://hypothesis.works/articles/what-is-property-based-testing/\">What is Property Based Testing?</a></li>\n<li><a href=\"http://hypothesis.works/articles/getting-started-with-hypothesis/\">Getting started with Hypothesis</a></li>\n<li><a href=\"http://hypothesis.works/articles/anatomy-of-a-test/\">Anatomy of a Hypothesis Based Test</a></li>\n<li><a href=\"http://hypothesis.works/articles/incremental-property-based-testing/\">Evolving toward property-based testing with Hypothesis</a></li>\n</ul>","frontmatter":{"title":"A 5 minute Intro to Hypothesis","date":"October 14, 2017"}}},"pageContext":{"slug":"/2017-10-14-a-5-minute-intro-to-hypothesis/","previous":{"fields":{"slug":"/2017-10-13-how-to-import-d3-plugins-with-webpack/"},"frontmatter":{"title":"How to import d3 plugins with Webpack"}},"next":{"fields":{"slug":"/2017-10-31-how-to-get-started-with-regl-and-webpack/"},"frontmatter":{"title":"How to get started with regl and Webpack"}}}}