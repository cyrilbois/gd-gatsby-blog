{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"a4126e1f-d809-5ca3-8a0e-99ea3c235b88","excerpt":"When it comes to manage environments and dependencies in Python projects, a very popular combination includes  Virtualenvwrapper  to manage…","timeToRead":8,"html":"<p>When it comes to manage environments and dependencies in Python projects, a very popular combination includes <a href=\"https://www.giacomodebidda.com/virtual-environments-with-virtualenvwrapper/\">Virtualenvwrapper</a> to manage environments, and pip to install/remove Python packages. Of course, every time you start working on a project you need to remember to activate the virtual environment of that particular project. For example, with Virtualenvwrapper you would use <code class=\"language-text\">workon &lt;your-python-project&gt;</code>.</p>\n<p>A few weeks ago I found out about <a href=\"http://docs.pipenv.org/en/latest/\">Pipenv</a>, an experimental project by Kenneth Reitz. While I was reading the documentation I couldn’t help but notice how much Pipenv resembles the Javascript package manager <a href=\"https://yarnpkg.com/lang/en/\">yarn</a>. With yarn — or <a href=\"https://en.wikipedia.org/wiki/Npm_(software)\">npm</a> — you have a single tool that you can use to install/remove packages <strong>and</strong> create/manage environments.</p>\n<p>In this post I will show you how to use Pipenv in two scenarios: when starting a new project, and when installing the dependencies of a pre-existing project.</p>\n<p>If you want to follow along, start with installing Pipenv <em>globally</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip install pipenv</code></pre></div>\n<h2>Starting a new Python project</h2>\n<p>Create a dummy repository and cd into it:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">mkdir my-dummy-repo\ncd my-dummy-repo</code></pre></div>\n<p>Create a Python 2 virtual environment:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv --two</code></pre></div>\n<p>You should see this output in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Creating a Pipfile for this project...\nCreating a virtualenv for this project...\nRunning virtualenv with interpreter /usr/bin/python2\nNew python executable in /home/jack/.virtualenvs/my-dummy-repo-zmrIuv74/bin/python2\nAlso creating executable in /home/jack/.virtualenvs/my-dummy-repo-zmrIuv74/bin/python\nInstalling setuptools, pip, wheel...done.\n\nVirtualenv location: /home/jack/.virtualenvs/my-dummy-repo-zmrIuv74</code></pre></div>\n<p>The command you have just entered creates a new virtual environment and a <code class=\"language-text\">Pipfile</code>, a replacement of <code class=\"language-text\">requirements.txt</code>. In a <code class=\"language-text\">Pipfile</code>, all Python dependencies are declared with a <a href=\"https://github.com/toml-lang/toml\">TOML</a> syntax. To be honest, I don’t particularly like the TOML syntax, and I find the <code class=\"language-text\">package.json</code> file (generated by npm or yarn) much more readable. Anyway, here is how the <code class=\"language-text\">Pipfile</code> looks at this point:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[[source]]\nurl = &quot;https://pypi.python.org/simple&quot;\nverify_ssl = true</code></pre></div>\n<p>Let’s say that we didn’t really want to create a Python 2 environment, but a Python 3.6 environment. No big deal, with Pipenv we can remove the virtual environment with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv --rm</code></pre></div>\n<p>and create a Python 3.6 environment with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv --python python3.6</code></pre></div>\n<p>If you take a look at the <code class=\"language-text\">Pipfile</code>, you will see that nothing has changed. This is perfectly ok. We have just removed a virtual environment and created a new one. We didn’t change any dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[[source]]\nurl = &quot;https://pypi.python.org/simple&quot;\nverify_ssl = true</code></pre></div>\n<p>Bu where is this virtual environment?</p>\n<p>Pipenv creates all virtual environments at the location specified by the environment variable <code class=\"language-text\">WORKON_HOME</code>, just as virtualenvwrapper does. You can check where the virtual environment is by typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv --venv\n# or...\necho $VIRTUAL_ENV\n# or...\npip -V</code></pre></div>\n<p>In my case <code class=\"language-text\">WORKON_HOME</code> is <code class=\"language-text\">/home/jack/.virtualenvs/</code>, that’s why the output of <code class=\"language-text\">pipenv --venv</code> is <code class=\"language-text\">/home/jack/.virtualenvs/my-dummy-repo-zmrIuv74</code>.</p>\n<p><em>Note:</em> you can also activate, deactivate, remove this virtual environment with the same commands you would use for Virtualenvwrapper: <code class=\"language-text\">workon &lt;your-virtual-enviroment&gt;</code>, <code class=\"language-text\">deactivate</code>, <code class=\"language-text\">rmvirtualenv &lt;your-virtual-enviroment&gt;</code>.</p>\n<p>Let’s install some packages.</p>\n<p>Let’s say that for your project you need pandas. You can install the latest version with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv install pandas</code></pre></div>\n<p>Of course you can also choose a specific version when installing a dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv install requests==2.13.0</code></pre></div>\n<p>Finally, let’s install a development dependency:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv install ddt --dev</code></pre></div>\n<p>If you now type <code class=\"language-text\">pip list</code> in the terminal, you will see:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">ddt (1.1.1)\nnumpy (1.13.1)\npandas (0.20.3)\npip (9.0.1)\npython-dateutil (2.6.1)\npytz (2017.2)\nrequests (2.13.0)\nsetuptools (36.2.4)\nsix (1.10.0)\nwheel (0.30.0a0)</code></pre></div>\n<p>Your <code class=\"language-text\">Pipfile</code> will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">[[source]]\nurl = &quot;https://pypi.python.org/simple&quot;\nverify_ssl = true\n\n[dev-packages]\nddt = &quot;*&quot;\n\n[packages]\npandas = &quot;*&quot;\nrequests = &quot;==2.13.0&quot;</code></pre></div>\n<p>Now your dependencies are set on your system, but you still need to “freeze” them for everyone else. With the usual pip workflow, you could use <code class=\"language-text\">pip freeze &gt; requirements.txt</code>. With Pipenv you have to type a lot less:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv lock</code></pre></div>\n<p>which gives you this output:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Locking [dev-packages] dependencies...\nLocking [packages] dependencies...\nUpdated Pipfile.lock!</code></pre></div>\n<p>The first time I used pipenv, it felt a bit weird. I am familiar with yarn, and with yarn I don’t have to run two commands to install/lock the dependencies. I would just need to run <code class=\"language-text\">yarn add d3</code>, or <code class=\"language-text\">yarn add webpack --dev</code>. In fact, someone opened an <a href=\"https://github.com/kennethreitz/pipenv/issues/404\">issue on GitHub</a> and asked Kenneth why the need of manually invoking <code class=\"language-text\">pipenv lock</code> after <code class=\"language-text\">pipenv install</code> (or <code class=\"language-text\">pipenv uninstall</code>). Pipenv is still in an early stage, and Kenneth commented that he decided to have two commands because <code class=\"language-text\">pipenv lock</code> is quite slow (on my computer, locking the requirements for this dummy project took roughly 10 seconds).</p>\n<p>It should be noted that you can easily combine install and lock in a single command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv install pandas --lock</code></pre></div>\n<p>Now that alll dependencies are locked, let’s have a look at the <code class=\"language-text\">Pipfile.lock</code> file (basically a json file):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"_meta\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hash\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"sha256\"</span><span class=\"token operator\">:</span>\n        <span class=\"token string\">\"a770116c27db7e68723c431e7a00bc50e32d6ae6c719998e01a332da646757b6\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://pypi.python.org/simple\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"verify_ssl\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"default\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"numpy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==1.13.1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pandas\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==0.20.3\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"python-dateutil\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==2.6.1\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pytz\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==2017.2\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"requests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==2.13.0\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"six\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==1.10.0\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"develop\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ddt\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"==1.1.1\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another handy command is <code class=\"language-text\">pipenv update</code>, which updates pip to the latest version, uninstalls all packages, and finally re-installs all packages declared in the [packages] section of the <code class=\"language-text\">Pipfile</code> (for each package, it installs the latest compatible version).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Updating all dependencies from Pipfile...\nFound 6 installed package(s), purging...\nUninstalling ddt-1.1.1:\n  Successfully uninstalled ddt-1.1.1\nUninstalling numpy-1.13.1:\n  Successfully uninstalled numpy-1.13.1\nUninstalling pandas-0.20.3:\n  Successfully uninstalled pandas-0.20.3\nUninstalling python-dateutil-2.6.1:\n  Successfully uninstalled python-dateutil-2.6.1\nUninstalling pytz-2017.2:\n  Successfully uninstalled pytz-2017.2\nUninstalling requests-2.13.0:\n  Successfully uninstalled requests-2.13.0\n\nEnvironment now purged and fresh!\nPipfile found at /home/jack/Repos/my-dummy-repo/Pipfile. Considering this to be the project home.\nInstalling dependencies from Pipfile.lock...\nRequirement already satisfied: six==1.10.0 in /home/jack/.virtualenvs/my-dummy-repo-zmrIuv74/lib/python3.6/site-packages\nCollecting pytz==2017.2\n  Using cached pytz-2017.2-py2.py3-none-any.whl\nCollecting python-dateutil==2.6.1\n  Using cached python_dateutil-2.6.1-py2.py3-none-any.whl\nCollecting requests==2.13.0\n  Using cached requests-2.13.0-py2.py3-none-any.whl\nCollecting numpy==1.13.1\n  Using cached numpy-1.13.1-cp36-cp36m-manylinux1_x86_64.whl\nCollecting pandas==0.20.3\n  Using cached pandas-0.20.3-cp36-cp36m-manylinux1_x86_64.whl\nInstalling collected packages: pytz, python-dateutil, requests, numpy, pandas\nSuccessfully installed numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 requests-2.13.0\n\n⠸\nAll dependencies are now up-to-date!</code></pre></div>\n<p><em>Note:</em> you <strong>should</strong> put <code class=\"language-text\">Pipfile</code> and <code class=\"language-text\">Pipfile.lock</code> under version control.</p>\n<h2>Installing dependencies of a pre-existing project</h2>\n<p>Some weeks ago I discovered <a href=\"https://github.com/plotly/dash\">Plotly Dash</a>, a cool project based on React.js and the Plotly API. Dash allows you to develop reactive web apps and interactive dashboards in Python. I felt super-exited about it, because I have been looking for the Python equivalent of the <a href=\"https://shiny.rstudio.com/\">R Shiny package</a> for a long time. I also wanted to try Pipenv in a real project, so I decided to develop a small project with Dash and to use Pipenv to manage the virtual environment and the project dependencies.</p>\n<p>You can clone my Dash project via SSH:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">git clone git@github.com:jackdbd/dash-earthquakes.git</code></pre></div>\n<p>Then go to the project directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">cd dash-earthquakes</code></pre></div>\n<p>Now you have to create the virtual environment. I developed this project in a Python 3.6 enviroment, so it makes sense for you to use the same setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv --python python3.6</code></pre></div>\n<p>Install all dependencies. You could use the <code class=\"language-text\">--dev</code> flag to include all development dependencies, but in this small project I don’t have them:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv install</code></pre></div>\n<p>You can also update and lock the dependencies once again:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pipenv update\npipenv lock</code></pre></div>\n<p>Finally, you can have a look at the packages available in this virtual environment by typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip list</code></pre></div>\n<h2>Pipenv and Travis CI</h2>\n<p>I use Pipenv for <a href=\"https://github.com/jackdbd/dash-earthquakes\">dash-earthquakes</a>, a very simple dashboard that displays the most recent eathquakes in the world (if you are interested in how I created this application, I wrote an <a href=\"https://www.giacomodebidda.com/visualize-earthquakes-with-plotly-dash/\">article</a> about it).</p>\n<p>I wanted to setup <a href=\"https://travis-ci.org/\">Travis</a> for this project, but it took me a while to figure out how to use pipenv in this environment. A possible solution comes from the <a href=\"http://docs.pipenv.org/en/latest/advanced.html\">pipenv advanced documentation</a>: use a <code class=\"language-text\">Makefile</code> to install pipenv and run the tests.</p>\n<p>Here is how the <code class=\"language-text\">Makefile</code> looks like.</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">help:\n\t@echo &#39;    init&#39;\n\t@echo &#39;        install pipenv and all project dependencies&#39;\n\t@echo &#39;    test&#39;\n\t@echo &#39;        run all tests&#39;\n\ninit:\n\t@echo &#39;Install python dependencies&#39;\n\tpip install pipenv\n\tpipenv install\n\ntest:\n\t@echo &#39;Run all tests&#39;\n\tpipenv run py.test tests</code></pre></div>\n<p>And here is a basic <code class=\"language-text\">.travis.yml</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> python\n<span class=\"token key atrule\">python</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token number\">3.5</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token number\">3.6</span>\n<span class=\"token key atrule\">install</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> make init\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> make test</code></pre></div>\n<h2>Pipen and PyUp</h2>\n<p>I usually keep track of my Python dependencies with the <a href=\"https://pyup.io/\">PyUp</a> bot. Unfortunately, it seems that PyUp does not support pipenv at the moment.</p>\n<p>Of course you can activate the virtual environment and create a <code class=\"language-text\">requirements.txt</code> with <code class=\"language-text\">pip freeze &gt; requirements.txt</code>, but you would still need to check that file in, to make it available for PyUp. That is confusing, because pipenv don’t use requirement files.</p>","frontmatter":{"title":"Pipenv","date":"July 28, 2017"}}},"pageContext":{"slug":"/pipenv/","previous":{"fields":{"slug":"/my-personal-git-memo/"},"timeToRead":6,"frontmatter":{"title":"My personal Git Memo","path":"/my-personal-git-memo/"}},"next":{"fields":{"slug":"/how-to-write-a-killer-readme/"},"timeToRead":9,"frontmatter":{"title":"How to write a killer README","path":"/how-to-write-a-killer-readme/"}}}}