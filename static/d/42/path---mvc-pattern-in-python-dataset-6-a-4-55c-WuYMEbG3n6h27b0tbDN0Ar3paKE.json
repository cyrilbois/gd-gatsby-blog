{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"92a90f51-1092-57ff-861d-b0aecc0c7a24","excerpt":"This is the  third  article of a series of blog posts related to the MVC pattern. In the first article we saw how to divide business logic…","timeToRead":12,"html":"<p>This is the <strong>third</strong> article of a series of blog posts related to the MVC pattern. In the first article we saw how to divide business logic, presentation layer and user interaction into three components: Model, View and Controller. Last time we replaced the Model without touching a single line of code neither in the View, nor in the Controller.</p>\n<p>This time we are going to replace the Model once again, but instead of using a database directly, we are going to use a small <a href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\">ORM</a> called <a href=\"https://dataset.readthedocs.io/en/latest/\">Dataset</a>.</p>\n<p>Here are the links to the other articles in the series:</p>\n<ol>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-introduction-and-basicmodel/\">MVC pattern in Python: Introduction and BasicModel</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-sqlite/\">MVC pattern in Python: SQLite</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-dataset/\">MVC pattern in Python: Dataset</a></li>\n</ol>\n<p><em>All code was written in Python 3.5. If you are using Python 2.7 you should be able to run it with a few minor changes.</em></p>\n<hr>\n<p>Table of contents</p>\n<ol>\n<li><a href=\"#intro\">Introduction</a></li>\n<li><a href=\"#crud\">CRUD</a></li>\n<li><a href=\"#postgres\">Switch to PostgreSQL</a></li>\n<li><a href=\"#model\">Model</a></li>\n<li><a href=\"#view-controller\">View and Controller</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p><a name=\"intro\"><h2>Introduction</h2></a>\nFirst of all, if you haven’t read the first article in the MVC series, I suggest you to read that one first, otherwise many of the things here will not make much sense. Moreover, you will need the code for the <code class=\"language-text\">View</code> and the <code class=\"language-text\">Controller</code>.</p>\n<p>Dataset is a small abstraction layer built on top of the most popular Python ORM, <a href=\"http://www.sqlalchemy.org/\">SqlAlchemy</a> (interestingly enough, on GitHub <a href=\"https://github.com/pudo/dataset/\">Dataset</a> has even more stars than <a href=\"https://github.com/zzzeek/sqlalchemy\">SqlAlchemy</a> itself!). I stumbled upon this project when I was playing around with <a href=\"https://kivy.org/#home\">Kivy</a> and I needed to store a few records. It was just a small application and I didn’t want to use a database, so I thought about using the <a href=\"https://kivy.org/docs/api-kivy.storage.jsonstore.html\">JSON Storage</a> module of the Kivy framework itself. That worked, but I didn’t like it too much, so I started looking for a better alternative.</p>\n<p>As they say in their <a href=\"https://dataset.readthedocs.io/en/latest/\">awesome documentation</a>, with Dataset you can use databases just like you would use a JSON file or a NoSQL store. And the cool thing is that your code will stay basically the same, no matter which database engine you want to use (at this time Dataset supports SQLite, PostgreSQL and MySQL).</p>\n<p>In this article I will show you how to use SQLite and PostgreSQL with Dataset.</p>\n<p><a name=\"crud\"><h2>CRUD</h2></a>\nAs we did last time, let’s implement each CRUD functionality in the simplest way possible.</p>\n<p>Let’s review the inventory of a small grocery store. A typical product list would look like this:</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Bread</td>\n                <td>0.5</td>\n                <td>20</td>\n            </tr>\n            <tr>\n                <td>Milk</td>\n                <td>1.0</td>\n                <td>10</td>\n            </tr>\n            <tr>\n                <td>Wine</td>\n                <td>10.0</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>Create a Python script and call it <code class=\"language-text\">dataset_backend.py</code>.</p>\n<p>The first thing to do is to connect to a database. With Dataset you just need a <a href=\"https://dataset.readthedocs.io/en/latest/api.html#dataset.connect\">single line of code</a>. Let’s connect to an in-memory SQLite databse with:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> dataset\nconn <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///:memory:'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">dataset.connect</code> returns an instance of class <code class=\"language-text\">Database</code>, an object that represents a SQL database with multiple tables, and opens a new connection to this database. No need to worry about connection timeouts or disconnections.</p>\n<p>Ok, now you need to create a table. Forget about SQL statements and Data Definition Language: with Dataset you have <em>automatic schema</em>, so you don’t have to specify any datatype in advance.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>exc <span class=\"token keyword\">import</span> NoSuchTableError\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_table</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Load a table or create it if it doesn't exist yet.\n\n    The function load_table can only load a table if exist, and raises a NoSuchTableError if the table does not already exist in the database.\n\n    The function get_table either loads a table or creates it if it doesn't exist yet. The new table will automatically have an id column unless specified via optional parameter primary_id, which will be used as the primary key of the table.\n\n    Parameters\n    ----------\n    table_name : str\n    conn : dataset.persistence.database.Database\n    \"\"\"</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> NoSuchTableError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Table {} does not exist. It will be created now'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>get_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> primary_id<span class=\"token operator\">=</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> primary_type<span class=\"token operator\">=</span><span class=\"token string\">'String'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created table {} on database {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> DB_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here is the code for CRUD operations.</p>\n<p><em>Create</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>exc <span class=\"token keyword\">import</span> IntegrityError<span class=\"token punctuation\">,</span> NoSuchTableError\n<span class=\"token keyword\">import</span> mvc_exceptions <span class=\"token keyword\">as</span> mvc_exc\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Insert a single item in a table.\n\n    Parameters\n    ----------\n    name : str\n    price : float\n    quantity : int\n    table_name : dataset.persistence.table.Table\n    conn : dataset.persistence.database.Database\n\n    Raises\n    ------\n    mvc_exc.ItemAlreadyStored: if the record is already stored in the table.\n    \"\"\"</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        table<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span>price<span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span>quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> IntegrityError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemAlreadyStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'\"{}\" already stored in table \"{}\".\\nOriginal Exception raised: {}'</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_many</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Insert all items in a table.\n\n    Parameters\n    ----------\n    items : list\n        list of dictionaries\n    table_name : str\n    conn : dataset.persistence.database.Database\n    \"\"\"</span>\n    <span class=\"token comment\"># TODO: check what happens if 1+ records can be inserted but 1 fails</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>\n            table<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>\n                name<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'quantity'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> IntegrityError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'At least one in {} was already stored in table \"{}\".\\nOriginal '</span>\n              <span class=\"token string\">'Exception raised: {}'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Read</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Select a single item in a table.\n\n    The dataset library returns a result as an OrderedDict.\n\n    Parameters\n    ----------\n    name : str\n        name of the record to look for in the table\n    table_name : str\n    conn : dataset.persistence.database.Database\n\n    Raises\n    ------\n    mvc_exc.ItemNotStored: if the record is not stored in the table.\n    \"\"\"</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    row <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t read \"{}\" because it\\'s not stored in table \"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_all</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Select all items in a table.\n\n    The dataset library returns results as OrderedDicts.\n\n    Parameters\n    ----------\n    table_name : str\n    conn : dataset.persistence.database.Database\n\n    Returns\n    -------\n    list\n        list of dictionaries. Each dict is a record.\n    \"\"\"</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    rows <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Update</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Update a single item in the table.\n\n    Note: dataset update method is a bit counterintuitive to use. Read the docs here: https://dataset.readthedocs.io/en/latest/quickstart.html#storing-data\n    Dataset has also an upsert functionality: if rows with matching keys exist they will be updated, otherwise a new row is inserted in the table.\n\n    Parameters\n    ----------\n    name : str\n    price : float\n    quantity : int\n    table_name : str\n    conn : dataset.persistence.database.Database\n\n    Raises\n    ------\n    mvc_exc.ItemNotStored: if the record is not stored in the table.\n    \"\"\"</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    row <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">}</span>\n        table<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> keys<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t update \"{}\" because it\\'s not stored in table \"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Delete</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> item_name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Delete a single item in a table.\n\n    Parameters\n    ----------\n    item_name : str\n    table_name : str\n    conn : dataset.persistence.database.Database\n\n    Raises\n    ------\n    mvc_exc.ItemNotStored: if the record is not stored in the table.\n    \"\"\"</span>\n    table <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>load_table<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    row <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span>find_one<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        table<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>item_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t delete \"{}\" because it\\'s not stored in table \"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let’s put everything together and see if these CRUD operations are correct!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    conn <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///:memory:'</span><span class=\"token punctuation\">)</span>\n\n    table_name <span class=\"token operator\">=</span> <span class=\"token string\">'items'</span>\n    create_table<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># CREATE</span>\n    my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    insert_many<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> items<span class=\"token operator\">=</span>my_items<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span>\n    insert_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'beer'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to insert an object already stored we get an ItemAlreadyStored exception</span>\n    <span class=\"token comment\"># insert_one(conn, 'beer', 2.0, 5, table_name=table_name)</span>\n\n    <span class=\"token comment\"># READ</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT milk'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT all'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_all<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to select an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print(select_one(conn, 'pizza', table_name=table_name))</span>\n\n    <span class=\"token comment\"># UPDATE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE bread, SELECT bread'</span><span class=\"token punctuation\">)</span>\n    update_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to update an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('UPDATE pizza')</span>\n    <span class=\"token comment\"># update_one(conn, 'pizza', 9.5, 5, table_name=table_name)</span>\n\n    <span class=\"token comment\"># DELETE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE beer, SELECT all'</span><span class=\"token punctuation\">)</span>\n    delete_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'beer'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_all<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to delete an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('DELETE fish')</span>\n    <span class=\"token comment\"># delete_one(conn, 'fish', table_name=table_name)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"postgres\"><h2>Switch to PostgreSQL</h2></a>\nOK cool, now that we tested all CRUD operations on a SQLite database, let’s try to switch to PostgreSQL.</p>\n<p>If you need to setup PostgreSQL on your machine have a look at <a href=\"http://www.giacomodebidda.com/blog/first-steps-with-postgresql/\">this post</a>, otherwise just open a terminal and create a new Postgres user:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sudo -i -u postgres\ncreateuser --interactive\n&gt;&gt;&gt; Enter name of role to add: test_user\n&gt;&gt;&gt; Shall the new role be a superuser? (y/n) y</code></pre></div>\n<p>then go the <code class=\"language-text\">psql</code> shell, assign a password to this user and create a database.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">ALTER USER test_user WITH PASSWORD &#39;test_password&#39;;\nCREATE DATABASE test_db;</code></pre></div>\n<p>In the <code class=\"language-text\">psql</code> shell you can double check that this new database and user are available by typing <code class=\"language-text\">\\l</code> and <code class=\"language-text\">\\du</code>, respectively. Exit the <code class=\"language-text\">psql</code> shell with <code class=\"language-text\">\\q</code>.</p>\n<p>In the <code class=\"language-text\">dataset_backend.py</code> file, create a new function to connect to the database, so you can easily switch back and forth between SQLite and PostgreSQL.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># dataset_backend.py</span>\nDB_name <span class=\"token operator\">=</span> <span class=\"token string\">'test_db'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UnsupportedDatabaseEngine</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">connect_to_db</span><span class=\"token punctuation\">(</span>db_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> db_engine<span class=\"token operator\">=</span><span class=\"token string\">'sqlite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Connect to a database. Create the database if there isn't one yet.\n\n    The database can be a SQLite DB (either a DB file or an in-memory DB), or a PostgreSQL DB. In order to connect to a PostgreSQL DB you have first to create a database, create a user, and finally grant him all necessary privileges on that database and tables.\n    'postgresql://&lt;username>:&lt;password>@localhost:&lt;PostgreSQL port>/&lt;db name>'\n    Note: at the moment it looks it's not possible to close a connection manually (e.g. like calling conn.close() in sqlite3).\n\n\n    Parameters\n    ----------\n    db_name : str or None\n        database name (without file extension .db)\n    db_engine : str\n        database engine ('sqlite' or 'postgres')\n\n    Returns\n    -------\n    dataset.persistence.database.Database\n        connection to a database\n    \"\"\"</span>\n    engines <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'postgres'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> db_name <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        db_string <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///:memory:'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New connection to in-memory SQLite DB...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> db_engine <span class=\"token operator\">==</span> <span class=\"token string\">'sqlite'</span><span class=\"token punctuation\">:</span>\n            db_string <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///{}.db'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>DB_name<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New connection to SQLite DB...'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> db_engine <span class=\"token operator\">==</span> <span class=\"token string\">'postgres'</span><span class=\"token punctuation\">:</span>\n            db_string <span class=\"token operator\">=</span> \\\n                <span class=\"token string\">'postgresql://test_user:test_password@localhost:5432/{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>DB_NAME<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New connection to PostgreSQL DB...'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> UnsupportedDatabaseEngine<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'No database engine with this name. '</span>\n                <span class=\"token string\">'Choose one of the following: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>engines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> dataset<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>db_string<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you now replace this line in the <code class=\"language-text\">main</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">conn <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///:memory:'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>with this line</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">conn <span class=\"token operator\">=</span> connect_to_db<span class=\"token punctuation\">(</span>db_name<span class=\"token operator\">=</span><span class=\"token string\">'test_db'</span><span class=\"token punctuation\">,</span> db_engine<span class=\"token operator\">=</span><span class=\"token string\">'postgres'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>you should be able to perform all CRUD operations on a PostgreSQL database, instead of SQLite.</p>\n<p>How cool is that? With a single line we completely switched database engine!</p>\n<p><a name=\"model\"><h2>Model</h2></a>\nNow that all CRUD operations are implemented as simple functions, creating a class for a Model that uses a SQLite database as persistence layer is pretty straightforward.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\n<span class=\"token keyword\">import</span> dataset_backend\n<span class=\"token keyword\">import</span> mvc_exceptions <span class=\"token keyword\">as</span> mvc_exc\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelDataset</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> application_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> <span class=\"token string\">'product'</span>\n        self<span class=\"token punctuation\">.</span>_connection <span class=\"token operator\">=</span> dataset_backend<span class=\"token punctuation\">.</span>connect_to_db<span class=\"token punctuation\">(</span>\n            dataset_backend<span class=\"token punctuation\">.</span>DB_name<span class=\"token punctuation\">,</span> db_engine<span class=\"token operator\">=</span><span class=\"token string\">'postgres'</span><span class=\"token punctuation\">)</span>\n        dataset_backend<span class=\"token punctuation\">.</span>create_table<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_item_type<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>create_items<span class=\"token punctuation\">(</span>application_items<span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_item_type\n\n    @item_type<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> new_item_type\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_connection\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dataset_backend<span class=\"token punctuation\">.</span>insert_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dataset_backend<span class=\"token punctuation\">.</span>insert_many<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> dataset_backend<span class=\"token punctuation\">.</span>select_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> dataset_backend<span class=\"token punctuation\">.</span>select_all<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dataset_backend<span class=\"token punctuation\">.</span>update_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dataset_backend<span class=\"token punctuation\">.</span>delete_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"view-controller\"><h2>View and Controller</h2></a>\n<code class=\"language-text\">View</code> and <code class=\"language-text\">Controller</code> are completely <strong>decoupled</strong> from the <code class=\"language-text\">Model</code> (and between themselves), so you don’t need to change anything in their implementation. If you need the code for these classes, see the <a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-introduction-and-basicmodel/\">first article</a> in the series.</p>\n<p>The only thing to do is to plug the <code class=\"language-text\">ModelDataset</code> in the <code class=\"language-text\">Controller</code>.</p>\n<p>Here is a snippet to test our small MVC application:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    c <span class=\"token operator\">=</span> Controller<span class=\"token punctuation\">(</span>ModelDataset<span class=\"token punctuation\">(</span>my_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> View<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span>bullet_points<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>insert_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>insert_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span><span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span><span class=\"token string\">'fish'</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"conclusion\"><h2>Conclusion</h2></a>\nIn this article we implemented an ORM-based backend for the <em>Model</em> component of the MVC architecture. Thanks to the Dataset package, we can switch from SQLite (maybe for <em>development</em>) to PostgreSQL (maybe for <em>production</em>) very easily.</p>\n<p>Dataset is a really cool project and I strongly suggest you to check it out. You can go through the awesome <a href=\"https://dataset.readthedocs.io/en/latest/quickstart.html\">quickstart in 12 minutes</a>.</p>\n<p>Ah, just in case you want to cleanup your postgres, open the <code class=\"language-text\">psql</code> shell as user <code class=\"language-text\">postgres</code> and drop the test database and test user with the following statements:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">DROP DATABASE test_db;\nDROP USER test_user;</code></pre></div>","frontmatter":{"title":"MVC pattern in Python: Dataset","date":"April 15, 2017","tags":["Python","Design Patterns"]}}},"pageContext":{"slug":"/mvc-pattern-in-python-dataset/","previous":{"fields":{"slug":"/mvc-pattern-in-python-sqlite/"},"timeToRead":12,"frontmatter":{"title":"MVC pattern in Python: SQLite","path":"/mvc-pattern-in-python-sqlite/"}},"next":{"fields":{"slug":"/threejs-project-starter-for-es6-and-webpack2/"},"timeToRead":5,"frontmatter":{"title":"Three.js project starter for ES6 and Webpack 2","path":"/threejs-project-starter-for-es6-and-webpack2/"}}}}