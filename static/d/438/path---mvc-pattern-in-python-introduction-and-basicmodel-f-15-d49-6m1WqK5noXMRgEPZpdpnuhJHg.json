{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"6606dc06-5c64-5efe-962f-652190654e8f","excerpt":"If you have ever worked with Graphical User Interfaces or web frameworks (e.g. Django), chances are that you heard about the  Model-View…","timeToRead":14,"html":"<p>If you have ever worked with Graphical User Interfaces or web frameworks (e.g. Django), chances are that you heard about the <em>Model-View-Controller</em> pattern.\nSince I wanted to understand and implement in Python the most popular patterns, I decided I had to implement a basic MVC from scratch.</p>\n<p>This is the <strong>first</strong> article of a series of blog posts related to the MVC pattern. Here are the links to the other articles in the series:</p>\n<ol>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-introduction-and-basicmodel/\">MVC pattern in Python: Introduction and BasicModel</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-sqlite/\">MVC pattern in Python: SQLite</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-dataset/\">MVC pattern in Python: Dataset</a></li>\n</ol>\n<p><em>All code was written in Python 3.5. If you are using Python 2.7 you should be able to run it with a few minor changes.</em></p>\n<hr>\n<p>Table of contents</p>\n<ol>\n<li><a href=\"#intro\">Introduction</a></li>\n<li><a href=\"#crud\">CRUD</a></li>\n<li><a href=\"#model\">Model</a></li>\n<li><a href=\"#view\">View</a></li>\n<li><a href=\"#controller\">Controller</a></li>\n<li><a href=\"#test-run\">Test Run</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p><a name=\"intro\"><h2>Introduction</h2></a>\nThe three components of the MVC pattern are <strong>decoupled</strong> and they are responsible for different things:</p>\n<ul>\n<li>the <strong>Model</strong> manages the data and defines rules and behaviors. It represents the <a href=\"WIKIPEDIA\">business logic</a> of the application. The data can be stored in the Model itself or in a database (only the Model has access to the database).</li>\n<li>the <strong>View</strong> presents the data to the user. A View can be any kind of output representation: a HTML page, a chart, a table, or even a simple text output. A View should never call its own methods; only a Controller should do it.</li>\n<li>the <strong>Controller</strong> accepts user’s inputs and delegates data representation to a View and data handling to a Model.</li>\n</ul>\n<p>Since Model, View and Controller are <strong>decoupled</strong>, each one of the three can be extended, modified and replaced without having to rewrite the other two.</p>\n<p><a name=\"crud\"><h2>CRUD</h2></a>\nIn order to understand how the MVC works I decided to implement a simple CRUD (Create, Read, Update, Delete) application.</p>\n<p><em>A word of caution:</em> according to Wikipedia, <a href=\"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">create, read, update, and delete</a> are the four basic functions of <em>persistent storage</em>. A persistance layer can be implemented with a database table, a XML file, a JSON, or even a CSV. However, in this first post I want to keep things as simple as possible, so I will create a MVC application that doesn’t have any persistent storage. You could argue that this is not really a CRUD application, but I hope that you will be satisfied with the next article, where I will implement the persistance layer with a SQLite database.</p>\n<p>Let’s think about the inventory of a small grocery store. A typical product list would look like this:</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Bread</td>\n                <td>0.5</td>\n                <td>20</td>\n            </tr>\n            <tr>\n                <td>Milk</td>\n                <td>1.0</td>\n                <td>10</td>\n            </tr>\n            <tr>\n                <td>Wine</td>\n                <td>10.0</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>In Python you can think about these items as a list of dictionaries.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>The list of items can be changed any time you perform one of the following operations:</p>\n<ul>\n<li><strong>create</strong> new items</li>\n<li><strong>update</strong> existing items</li>\n<li><strong>delete</strong> existing items</li>\n</ul>\n<p>The <strong>read</strong> operation does not modify anything in the list of items.</p>\n<p>Instead of jumping straight into creating classes for Model, View and Controller, let’s try to implement each CRUD functionality in the simplest way possible. Keep in mind that we have to use a <code class=\"language-text\">global</code> variable to store the list of <code class=\"language-text\">items</code> because its state must be shared across all operations.</p>\n<p>Create a python script and call it <code class=\"language-text\">basic_backend.py</code>.</p>\n<p>Let’s start with the <em>Create</em> functionality.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># basic_backend.py</span>\nitems <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># global variable where we keep the data</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_items</span><span class=\"token punctuation\">(</span>app_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    items <span class=\"token operator\">=</span> app_items\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    items<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, <em>Create</em> operations don’t return anything. They just append new data to the global <code class=\"language-text\">items</code> list.</p>\n<p>Let’s add a <em>Read</em> functionality.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># basic_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    myitems <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> myitems<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Actually there are already a couple of problems with this implementation:</p>\n<ol>\n<li>if you create the same element twice, you get a duplicate in the <code class=\"language-text\">items</code> list;</li>\n<li>if you try to read a non-existing item, you get an <code class=\"language-text\">IndexError</code> exception.</li>\n</ol>\n<p>These issues are very easy to fix, but I think it’s important to pause for a moment and think about why they are a problem for your application, and how you want to handle these exceptions.</p>\n<ol>\n<li><em>duplicate item</em> -> you don’t want duplicates in the list of items. As soon as the user tries to append an item that already exists, you want to prevent this operation and return her a message that the item was <em>already stored</em>.</li>\n<li><em>non-existing item</em> -> obviously you can’t read an item which is not currently available, so you want to tell the user that the item is <em>not stored</em>.</li>\n</ol>\n<p>It’s important to think about these issues right now because we want to create specific exceptions for these situations.</p>\n<p>In this example <code class=\"language-text\">items</code> is just a list, but if it were a table in a SQLite database, these conditions would trigger different exceptions (e.g. adding a duplicate could raise an <code class=\"language-text\">IntegrityError</code> exception). You want to create exceptions that are at a higher level of abstraction, and implement the exception handling for each persistance layer. If this sounds confusing right now, just bear with me and I hope it will make more sense in the next article.</p>\n<p>Let’s create these exceptions in a new file and call it <code class=\"language-text\">mvc_exceptions.py</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># mvc_exceptions.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemAlreadyStored</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemNotStored</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Let’s update the code in <code class=\"language-text\">basic_backend.py</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> mvc_exceptions <span class=\"token keyword\">as</span> mvc_exc\n\nitems <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    results <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> results<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemAlreadyStored<span class=\"token punctuation\">(</span><span class=\"token string\">'\"{}\" already stored!'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        items<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_items</span><span class=\"token punctuation\">(</span>app_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    items <span class=\"token operator\">=</span> app_items\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    myitems <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> myitems<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> myitems<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t read \"{}\" because it\\'s not stored'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>item <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now, if you try to create an item that already exists, you get a <code class=\"language-text\">ItemAlreadyStored</code> exception, and if you try to read an item that is not stored, you get a <code class=\"language-text\">ItemNotStored</code> exception.</p>\n<p>Let’s now add the <em>Update</em> and <em>Delete</em> functionalities.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># basic_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    <span class=\"token comment\"># Python 3.x removed tuple parameters unpacking (PEP 3113), so we have to do it manually (i_x is a tuple, idxs_items is a list of tuples)</span>\n    idxs_items <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> i_x<span class=\"token punctuation\">:</span> i_x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> idxs_items<span class=\"token punctuation\">:</span>\n        i<span class=\"token punctuation\">,</span> item_to_update <span class=\"token operator\">=</span> idxs_items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> idxs_items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> quantity<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t update \"{}\" because it\\'s not stored'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete_item</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> items\n    <span class=\"token comment\"># Python 3.x removed tuple parameters unpacking (PEP 3113), so we have to do it manually (i_x is a tuple, idxs_items is a list of tuples)</span>\n    idxs_items <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> i_x<span class=\"token punctuation\">:</span> i_x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> idxs_items<span class=\"token punctuation\">:</span>\n        i<span class=\"token punctuation\">,</span> item_to_delete <span class=\"token operator\">=</span> idxs_items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> idxs_items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">del</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t delete \"{}\" because it\\'s not stored'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Basically these operations represent the business logic of the application. Let’s test them!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># basic_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># CREATE</span>\n    create_items<span class=\"token punctuation\">(</span>my_items<span class=\"token punctuation\">)</span>\n    create_item<span class=\"token punctuation\">(</span><span class=\"token string\">'beer'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to re-create an object we get an ItemAlreadyStored exception</span>\n    <span class=\"token comment\"># create_item('beer', price=2.0, quantity=10)</span>\n\n    <span class=\"token comment\"># READ</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'READ items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>read_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to read an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('READ chocolate')</span>\n    <span class=\"token comment\"># print(read_item('chocolate'))</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'READ bread'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>read_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># UPDATE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE bread'</span><span class=\"token punctuation\">)</span>\n    update_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>read_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to update an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('UPDATE chocolate')</span>\n    <span class=\"token comment\"># update_item('chocolate', price=10.0, quantity=20)</span>\n\n    <span class=\"token comment\"># DELETE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE beer'</span><span class=\"token punctuation\">)</span>\n    delete_item<span class=\"token punctuation\">(</span><span class=\"token string\">'beer'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to delete an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('DELETE chocolate')</span>\n    <span class=\"token comment\"># delete_item('chocolate')</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'READ items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>read_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"model\"><h2>Model</h2></a>\nNow that all CRUD operations are implemented as simple functions, it’s very easy to “package” them into a single class. As you can see, there is no mention of <code class=\"language-text\">View</code> or <code class=\"language-text\">Controller</code> in the <code class=\"language-text\">ModelBasic</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\n<span class=\"token keyword\">import</span> basic_backend\n<span class=\"token keyword\">import</span> mvc_exceptions <span class=\"token keyword\">as</span> mvc_exc\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelBasic</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> application_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> <span class=\"token string\">'product'</span>\n        self<span class=\"token punctuation\">.</span>create_items<span class=\"token punctuation\">(</span>application_items<span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_item_type\n\n    @item_type<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> new_item_type\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        basic_backend<span class=\"token punctuation\">.</span>create_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        basic_backend<span class=\"token punctuation\">.</span>create_items<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> basic_backend<span class=\"token punctuation\">.</span>read_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> basic_backend<span class=\"token punctuation\">.</span>read_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        basic_backend<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        basic_backend<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"view\"><h2>View</h2></a>\nNow that the business logic is ready, let’s focus on the presentation layer. In this tutorial the data is presented to the user in a python shell, so this is definitely not something that you would use in a real application. However, the important thing to notice is that there is no logic in the <code class=\"language-text\">View</code> class, and all of its methods are <strong>normal functions</strong> (see the <code class=\"language-text\">@staticmethod</code> decorator). Also, there is no mention of the other two components of the MVC pattern. This means that if you want to design a fancy UI for your application, you just have to replace the <code class=\"language-text\">View</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_bullet_point_list</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--- {} LIST ---'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'* {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_number_point_list</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--- {} LIST ---'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}. {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_item</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">,</span> item_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//////////////////////////////////////////////////////////////'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Good news, we have some {}!'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{} INFO: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item_info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//////////////////////////////////////////////////////////////'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_missing_item_error</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We are sorry, we have no {}!'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_item_already_stored_error</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hey! We already have {} in our {} list!'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_item_not_yet_stored_error</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We don\\'t have any {} in our {} list. Please insert it first!'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'**************************************************************'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_item_stored</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hooray! We have just added some {} to our {} list!'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_change_item_type</span><span class=\"token punctuation\">(</span>older<span class=\"token punctuation\">,</span> newer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Change item type from \"{}\" to \"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>older<span class=\"token punctuation\">,</span> newer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_item_updated</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> o_price<span class=\"token punctuation\">,</span> o_quantity<span class=\"token punctuation\">,</span> n_price<span class=\"token punctuation\">,</span> n_quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Change {} price: {} --> {}'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> o_price<span class=\"token punctuation\">,</span> n_price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Change {} quantity: {} --> {}'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> o_quantity<span class=\"token punctuation\">,</span> n_quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --'</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">display_item_deletion</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------------------------------------------'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'We have just removed {} from our list'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------------------------------------------------------'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"controller\"><h2>Controller</h2></a>\nFinally, now that rules and logic (the Model) and information representation (the View) are done, we can focus on the <code class=\"language-text\">Controller</code>.\nAs you can see, when you instantiate a <code class=\"language-text\">Controller</code> you have to specify a Model and a View. However, this is just <em>composition</em>, so whenever you want to use a different Model, and/or a different View, you just have to plug them in when you instantiate the Controller. The Controller accepts user’s inputs and <em>delegates</em> data representation to the View and data handling to the Model.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>model <span class=\"token operator\">=</span> model\n        self<span class=\"token punctuation\">.</span>view <span class=\"token operator\">=</span> view\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> bullet_points<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        items <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>read_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n        <span class=\"token keyword\">if</span> bullet_points<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>show_bullet_point_list<span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>show_number_point_list<span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">show_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            item <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>read_item<span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n            item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span>item_type<span class=\"token punctuation\">,</span> item_name<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_missing_item_error<span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> price <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price must be greater than 0'</span>\n        <span class=\"token keyword\">assert</span> quantity <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity must be greater than or equal to 0'</span>\n        item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>create_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_stored<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> mvc_exc<span class=\"token punctuation\">.</span>ItemAlreadyStored <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_already_stored_error<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> price <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price must be greater than 0'</span>\n        <span class=\"token keyword\">assert</span> quantity <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity must be greater than or equal to 0'</span>\n        item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            older <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>read_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_updated<span class=\"token punctuation\">(</span>\n                name<span class=\"token punctuation\">,</span> older<span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> older<span class=\"token punctuation\">[</span><span class=\"token string\">'quantity'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_not_yet_stored_error<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># if the item is not yet stored and we performed an update, we have</span>\n            <span class=\"token comment\"># 2 options: do nothing or call insert_item to add it.</span>\n            <span class=\"token comment\"># self.insert_item(name, price, quantity)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        old_item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n        self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type <span class=\"token operator\">=</span> new_item_type\n        self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_change_item_type<span class=\"token punctuation\">(</span>old_item_type<span class=\"token punctuation\">,</span> new_item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        item_type <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>item_type\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_deletion<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>display_item_not_yet_stored_error<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> item_type<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"test-run\"><h2>Test Run</h2></a>\nLet’s see how everything works together!</p>\n<p>Create some items and instantiate a <code class=\"language-text\">Controller</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\nmy_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nc <span class=\"token operator\">=</span> Controller<span class=\"token punctuation\">(</span>ModelBasic<span class=\"token punctuation\">(</span>my_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> View<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Show all items. The <code class=\"language-text\">bullet_points</code> parameter controls which view to display. When you call <code class=\"language-text\">c.show_items()</code> you get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">--- PRODUCT LIST ---\n1. {&#39;name&#39;: &#39;bread&#39;, &#39;price&#39;: 0.5, &#39;quantity&#39;: 20}\n2. {&#39;name&#39;: &#39;milk&#39;, &#39;price&#39;: 1.0, &#39;quantity&#39;: 10}\n3. {&#39;name&#39;: &#39;wine&#39;, &#39;price&#39;: 10.0, &#39;quantity&#39;: 5}</code></pre></div>\n<p>and when you call <code class=\"language-text\">c.show_items(bullet_points=True)</code> you get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">--- PRODUCT LIST ---\n* {&#39;name&#39;: &#39;bread&#39;, &#39;price&#39;: 0.5, &#39;quantity&#39;: 20}\n* {&#39;name&#39;: &#39;milk&#39;, &#39;price&#39;: 1.0, &#39;quantity&#39;: 10}\n* {&#39;name&#39;: &#39;wine&#39;, &#39;price&#39;: 10.0, &#39;quantity&#39;: 5}</code></pre></div>\n<p>When you call <code class=\"language-text\">c.show_item(&#39;chocolate&#39;)</code>, but there is no <code class=\"language-text\">&#39;chocolate&#39;</code>, you get this message:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">**************************************************************\nWe are sorry, we have no CHOCOLATE!\nCan&#39;t read &quot;chocolate&quot; because it&#39;s not stored\n**************************************************************</code></pre></div>\n<p>Instead, when you call <code class=\"language-text\">c.show_item(&#39;bread&#39;)</code>, a different method of the <code class=\"language-text\">View</code> class is called, so you see a different output.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">//////////////////////////////////////////////////////////////\nGood news, we have some BREAD!\nPRODUCT INFO: {&#39;name&#39;: &#39;bread&#39;, &#39;price&#39;: 0.5, &#39;quantity&#39;: 20}\n//////////////////////////////////////////////////////////////</code></pre></div>\n<p>You are prevented from inserting the same item a second time (e.g. you type <code class=\"language-text\">c.insert_item(&#39;bread&#39;, price=1.0, quantity=5)</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">**************************************************************\nHey! We already have BREAD in our product list!\n&quot;bread&quot; already stored!\n**************************************************************</code></pre></div>\n<p>But obviously you can add an item which was is not currently stored, for example with: <code class=\"language-text\">c.insert_item(&#39;chocolate&#39;, price=2.0, quantity=10)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nHooray! We have just added some CHOCOLATE to our product list!\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</code></pre></div>\n<p>So now you can call <code class=\"language-text\">c.show_item(&#39;chocolate&#39;)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">//////////////////////////////////////////////////////////////\nGood news, we have some CHOCOLATE!\nPRODUCT INFO: {&#39;name&#39;: &#39;chocolate&#39;, &#39;price&#39;: 2.0, &#39;quantity&#39;: 10}\n//////////////////////////////////////////////////////////////</code></pre></div>\n<p>When you update an existing item, for example with <code class=\"language-text\">c.update_item(&#39;milk&#39;, price=1.2, quantity=20)</code>, you get:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --\nChange milk price: 1.0 --&gt; 1.2\nChange milk quantity: 10 --&gt; 20\n---   ---   ---   ---   ---   ---   ---   ---   ---   ---   --</code></pre></div>\n<p>And when you try to update some item which is not stored you get a warning. For example, <code class=\"language-text\">c.update_item(&#39;ice cream&#39;, price=3.5, quantity=20)</code> will result in the following message:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">**************************************************************\nWe don&#39;t have any ICE CREAM in our product list. Please insert it first!\nCan&#39;t read &quot;ice cream&quot; because it&#39;s not stored\n**************************************************************</code></pre></div>\n<p>You get a warning also when you try to delete some item which is not stored.</p>\n<p><code class=\"language-text\">c.delete_item(&#39;fish&#39;)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">**************************************************************\nWe don&#39;t have any FISH in our product list. Please insert it first!\nCan&#39;t delete &quot;fish&quot; because it&#39;s not stored\n**************************************************************</code></pre></div>\n<p>Finally, when you delete some item which is currently available, for example with <code class=\"language-text\">c.delete_item(&#39;bread&#39;)</code>, you get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">--------------------------------------------------------------\nWe have just removed bread from our list\n--------------------------------------------------------------</code></pre></div>\n<p><a name=\"conclusion\"><h2>Conclusion</h2></a>\nIn this article we saw how to implement a very simple Model-View-Controller pattern. I hope that the implementation of all CRUD operations as simple functions made things a bit easier to understand. However, this MVC application would not be very useful in the real world because there is no <em>persistance layer</em> where to store the data.\nIn the next article we will replace <code class=\"language-text\">ModelBasic</code> with a different class that uses a SQLite database. As I said, thanks to the flexible architecture provided by the MVC pattern, nothing is going to change neither in the <code class=\"language-text\">View</code>, nor in the <code class=\"language-text\">Controller</code>.</p>","frontmatter":{"title":"MVC pattern in Python: Introduction and BasicModel","date":"April 02, 2017"}}},"pageContext":{"slug":"/mvc-pattern-in-python-introduction-and-basicmodel/","previous":{"fields":{"slug":"/first-steps-with-postgresql/"},"timeToRead":5,"frontmatter":{"title":"First steps with PostgreSQL","path":"/first-steps-with-postgresql/"}},"next":{"fields":{"slug":"/mvc-pattern-in-python-sqlite/"},"timeToRead":12,"frontmatter":{"title":"MVC pattern in Python: SQLite","path":"/mvc-pattern-in-python-sqlite/"}}}}