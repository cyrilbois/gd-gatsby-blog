{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"72ead641-3512-5a12-a19f-5699fb2dfde1","excerpt":"Some weeks ago I decided to start studying design patterns and implementing them in Python.  Design patterns  and  Head first in design…","html":"<p>Some weeks ago I decided to start studying design patterns and implementing them in Python. <em>Design patterns</em> and <em>Head first in design patterns</em> are constantly cited for being really good books. I added them to my reading list some time ago, but I still haven’t managed to read them so far. Nonetheless, I’ve read several blog posts, articles on Wikipedia and answers on Stack Overflow and started implementing some of these patterns.</p>\n<p>Here we are going to see the <em>Adapter</em> pattern.</p>\n<h2>Adapter is a structural design pattern</h2>\n<p>Structural design patterns are concerned with how classes and objects are <em>composed</em> to form larger structures. They help to use classes or methods which may not be usable directly, or they can ease the design by identifying a simple way to build relationships between entities.</p>\n<p><em>Adapter</em> allows a <em>Client</em> to access otherwise not directly accessible functionalities of a <em>Supplier</em> . Adapter makes things work after they are designed: it produces an interface for a single object or class, and <em>adapts</em> such class in a way that a <em>Client</em> can use it.</p>\n<blockquote>\n<p>You have got <em>this</em>, and you <strong>need</strong> <em>that</em>.</p>\n</blockquote>\n<h2>How do we implement the Adapter Pattern?</h2>\n<p>There are two ways of implementing the Adapter pattern:</p>\n<ol>\n<li>Object Adapter</li>\n<li>Class Adapter</li>\n</ol>\n<p>The object adapter uses <strong>encapsulation</strong>, while the class adapter uses <strong>multiple inheritance</strong> (Python supports both encapsulation and multiple inheritance).</p>\n<p>Let’s imagine that you have a smartphone (client) and you want to charge it. In order to charge a mobile phone you need a direct current (DC) and an input voltage of a few volts (from 3.7V to 5.2V I suppose), so you can’t simply plug it directly into a wall socket (supplier), which provides an alternate current (AC) and outputs either 230V (in Europe) or 120V (in the US). Namely, without a phone charger (the Adapter) you <strong>can’t</strong> charge your phone. </p>\n<p><em>In the following code I implemented both a European Socket class and and an American Socket class because they will be useful later on when explaining the Class Adapter approach. For now you can ignore the USSocket class.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Client</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Smartphone</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    max_input_voltage <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">outcome</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> input_voltage <span class=\"token operator\">></span> cls<span class=\"token punctuation\">.</span>max_input_voltage<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input voltage: {}V -- BURNING!!!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input voltage: {}V -- Charging...\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Charge the phone with the given input voltage.\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>outcome<span class=\"token punctuation\">(</span>input_voltage<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># Supplier</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    output_voltage <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EUSocket</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    output_voltage <span class=\"token operator\">=</span> <span class=\"token number\">230</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">USSocket</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    output_voltage <span class=\"token operator\">=</span> <span class=\"token number\">120</span></code></pre></div>\n<p>This is the current scenario:</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Client</th>\n                <th>Supplier</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Smartphone</td>\n                <td>EUSocket</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>If you take a Smartphone instance and you call <code class=\"language-text\">charge</code> with <code class=\"language-text\">EUSocket.output_voltage</code> as argument, you will fail at charging your phone.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smartphone <span class=\"token operator\">=</span> Smartphone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsmartphone<span class=\"token punctuation\">.</span>charge<span class=\"token punctuation\">(</span>EUSocket<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Input voltage<span class=\"token punctuation\">:</span> 230V <span class=\"token operator\">-</span><span class=\"token operator\">-</span> BURNING!!!</code></pre></div>\n<h2>1. Object Adapter</h2>\n<p>Obvioulsy, you need a phone charger to charge your smarthone. You can think of this phone charger as a completely independent <em>entity</em> from the smartphone and the wall socket. This new entity encapsulates client and supplier, and allows you to call the <code class=\"language-text\">charge</code> method without changing anything, neither in the Smartphone class, nor the Socket class. The phone charger converts an alternate current, high voltage power supply, into a direct current, low voltage power supply that can be used to charge the smartphone.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">EUAdapter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"EUAdapter encapsulates client (Smartphone) and supplier (EUSocket).\"\"\"</span>\n    input_voltage <span class=\"token operator\">=</span> EUSocket<span class=\"token punctuation\">.</span>output_voltage\n    output_voltage <span class=\"token operator\">=</span> Smartphone<span class=\"token punctuation\">.</span>max_input_voltage</code></pre></div>\n<p>The EUAdapter class is a Supplier to the Smartphone class, and at the same time it’s a Client to the EUSocket class.</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Client</th>\n                <th>Supplier</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Smartphone</td>\n                <td>EUAdapter</td>\n            </tr>\n            <tr>\n                <td>EUAdapter</td>\n                <td>EUSocket</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>If you now take a Smartphone instance and call <code class=\"language-text\">charge</code> with <code class=\"language-text\">EUAdapter.output_voltage</code> as argument, you can finally charge your phone.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smartphone<span class=\"token punctuation\">.</span>charge<span class=\"token punctuation\">(</span>EUAdapter<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Input voltage<span class=\"token punctuation\">:</span> 5V <span class=\"token operator\">-</span><span class=\"token operator\">-</span> Charging<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2>2. Class Adapter</h2>\n<p>You can also think that the combination smartphone + phone charger <em>defines</em> a unique system which can directly use the wall socket.</p>\n<p>You started with a <code class=\"language-text\">Smartphone</code> and a <code class=\"language-text\">Socket</code>, and now you want to define a system which inherits methods and attributes both from <code class=\"language-text\">Smartphone</code> and <code class=\"language-text\">Socket</code>. You have to use <em>multiple inheritance</em>.</p>\n<p>With this approach you don’t create a new entity between the client and the supplier, but you redefine the client in a way that it can directly work with the supplier. You don’t have a <code class=\"language-text\">Smartphone</code> any longer, you have a new entity which is the combination of a <code class=\"language-text\">Smartphone</code> and a <code class=\"language-text\">Socket</code>.</p>\n<p>Since you are getting the <code class=\"language-text\">output_voltage</code> from a <code class=\"language-text\">Socket</code>, you have to define a method <code class=\"language-text\">transform_voltage</code> to convert a high voltage AC to a low voltage DC. Then you need to override the <code class=\"language-text\">charge</code> method inherited from <code class=\"language-text\">Smartphone</code> and call <code class=\"language-text\">transform_voltage</code> before calling the <code class=\"language-text\">outcome</code> method.</p>\n<p>I decided to have two subclasses of Socket to make this example a bit closer to the real world. When you take a Smartphone and a Socket, you define a system which will work for that Smartphone and <strong>that specific type of Socket</strong> (e.g. USSocket), but will not work with the same Smartphone and a different type of Socket (EUSocket).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CannotTransformVoltage</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Exception raised by the SmartphoneAdapter.\n\n    This exception represents the fact that an adapter can not provide the\n    right voltage to the Smartphone if the voltage of the Socket is wrong.\"\"\"</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartphoneAdapter</span><span class=\"token punctuation\">(</span>Smartphone<span class=\"token punctuation\">,</span> Socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">transform_voltage</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> input_voltage <span class=\"token operator\">==</span> cls<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">.</span>max_input_voltage\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> CannotTransformVoltage<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Can\\'t transform {0}-{1}V. This adapter transforms {2}-{1}V.\"</span>\n                <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>input_voltage<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>max_input_voltage<span class=\"token punctuation\">,</span>\n                        cls<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> input_voltage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            voltage <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span>transform_voltage<span class=\"token punctuation\">(</span>input_voltage<span class=\"token punctuation\">)</span>\n            cls<span class=\"token punctuation\">.</span>outcome<span class=\"token punctuation\">(</span>voltage<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> CannotTransformVoltage <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartphoneEUAdapter</span><span class=\"token punctuation\">(</span>SmartphoneAdapter<span class=\"token punctuation\">,</span> EUSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"System (smartphone + adapter) for a European Socket.\n\n    Note: SmartphoneAdapter already inherited from Smartphone and Socket, but by re-inheriting from EUSocket we redefine all the stuff inherited from Socket.\n    \"\"\"</span> <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SmartphoneUSAdapter</span><span class=\"token punctuation\">(</span>SmartphoneAdapter<span class=\"token punctuation\">,</span> USSocket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"System (smartphone + adapter) for an American Socket.\"\"\"</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>Here are the two classes you are dealing with:</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Client</th>\n                <th>Supplier</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>SmartphoneEUAdapter</td>\n                <td>EUSocket</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>If you now take a <code class=\"language-text\">SmartphoneEUAdapter</code> instance and call <code class=\"language-text\">charge</code> with <code class=\"language-text\">EUSocket.output_voltage</code> as argument, you can see that you can charge your phone. However, if you take the same instance and call <code class=\"language-text\">charge</code> with <code class=\"language-text\">USSocket.output_voltage</code> as argument, you get a <code class=\"language-text\">CannotTransformVoltage</code> exception. In the latter case, you are using the wrong Adapter for a particular Supplier.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">smarthone_with_eu_adapter <span class=\"token operator\">=</span> SmartphoneEUAdapter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsmarthone_with_eu_adapter<span class=\"token punctuation\">.</span>charge<span class=\"token punctuation\">(</span>EUSocket<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Input voltage<span class=\"token punctuation\">:</span> 5V <span class=\"token operator\">-</span><span class=\"token operator\">-</span> Charging<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nsmarthone_with_eu_adapter<span class=\"token punctuation\">.</span>charge<span class=\"token punctuation\">(</span>USSocket<span class=\"token punctuation\">.</span>output_voltage<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Can't transform <span class=\"token number\">120</span><span class=\"token operator\">-</span>5V<span class=\"token punctuation\">.</span> This adapter transforms <span class=\"token number\">230</span><span class=\"token operator\">-</span>5V<span class=\"token punctuation\">.</span></code></pre></div>\n<h2>Object adapter or Class Adapter?</h2>\n<p>There are two <a href=\"http://stackoverflow.com/questions/5467005/adapter-pattern-class-adapter-vs-object-adapter\">strong reasons</a> to prefer the Object Adapter over the Class Adapter:</p>\n<ul>\n<li>loose coupling</li>\n<li>multiple inheritance is tricky</li>\n</ul>\n<p>With the Object Adapter you have <a href=\"https://en.wikipedia.org/wiki/Loose_coupling\">loose coupling</a>, so the Client is not required to know anything about the Supplier. The Smartphone doesn’t care where it gets its 5 volts. As long as it gets them, it will charge.</p>\n<p>With the Class Adapter you lose this property, because you have a new entity which is <em>defined</em> by the Client and the Supplier, and it works only for this specific type of Client and specific type of Supplier (e.g. SmartphoneEUAdapter doesn’t work with a USSocket). This means that you have created an interface which allows you to use the Client and the Supplier, but where Client and Supplier are <em>strongly coupled</em>. Since you usually want to design interfaces to <em>uncouple</em> things, this is not a desired property.</p>\n<p>Another reason why I decided to define two subclasses of Socket is to show that multiple inheritance can be tricky. As we can see in the code above, <code class=\"language-text\">SmartphoneAdapter</code> already contains all attributes and methods from <code class=\"language-text\">Smartphone</code> and <code class=\"language-text\">Socket</code>. However, since what you really want to use are the subclasses of <code class=\"language-text\">Socket</code>, namely <code class=\"language-text\">EUSocket</code> and <code class=\"language-text\">USSocket</code>, you need to re-inherit when you subclass <code class=\"language-text\">SmartphoneAdapter</code>. You can use a different strategy and create <code class=\"language-text\">SmartphoneEUAdapter</code> by directly inheriting from <code class=\"language-text\">Smartphone</code> and <code class=\"language-text\">EUSocket</code>, but then you would need to do the same for <code class=\"language-text\">SmartphoneUSAdapter</code>, which needs to inherit from <code class=\"language-text\">Smartphone</code> and <code class=\"language-text\">USSocket</code>. This will result in duplicate code, because you would need to write <code class=\"language-text\">transform_voltage</code> and <code class=\"language-text\">charge</code> twice.</p>\n<p>You need the code? Grab it <a href=\"https://github.com/jackaljack/design-patterns\">here</a>!</p>","frontmatter":{"title":"Adapter pattern in Python","date":"November 26, 2016"}}},"pageContext":{"slug":"/2016-11-26-adapter-pattern-in-python/","previous":null,"next":{"fields":{"slug":"/2016-11-26-facade-pattern-in-python/"},"frontmatter":{"title":"Façade pattern in Python"}}}}