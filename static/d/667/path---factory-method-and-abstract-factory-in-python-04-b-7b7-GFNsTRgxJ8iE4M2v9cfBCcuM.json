{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"a31057f7-6721-5129-9844-8dca0125cf4b","excerpt":"Factory Method and Abstract Factory are  creational  design patterns and allow you to create objects without manually invoking a constructor…","timeToRead":6,"html":"<p>Factory Method and Abstract Factory are <strong>creational</strong> design patterns and allow you to create objects without manually invoking a constructor. These patterns are closely related and share many similarities, that’s why I had a hard time in understanding the difference between the two.</p>\n<p>A <a href=\"http://stackoverflow.com/a/4210168\">concise answer on Stack Overflow</a> pointed me in the right direction, suggesting me to focus on the intent of these patterns. So, let’s see what problem Factory Method and Abstract Factory try to solve.</p>\n<h2>Factory Method</h2>\n<p>In Factory Method the client knows what she wants, but for some reason she can’t create the object directly. The reasons vary case-by-case: maybe she wants to use a common interface instead of manually instantiating the class she requires, or maybe she would need to pass a huge set of parameters to the constructor. Most of the time the client wants a single object, and this pattern relieves her of the responsability of creating this object directly.</p>\n<p>Let’s see a very simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Car</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Bike</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">factory_method</span><span class=\"token punctuation\">(</span>product_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> product_type <span class=\"token operator\">==</span> <span class=\"token string\">'car'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _Car<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> product_type <span class=\"token operator\">==</span> <span class=\"token string\">'bike'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _Bike<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Cannot make: {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>product_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> product_type <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bike'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        product <span class=\"token operator\">=</span> factory_method<span class=\"token punctuation\">(</span>product_type<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here the client knows that in the end she wants a bike or a car, but since these two classes are private she should not use them directly. Instead she will call <code class=\"language-text\">factory_method</code>, that will instantiate such classes for her. Here factory<em>method is just a function, and acts as a “virtual” constructor of either `</em>Car<code class=\"language-text\">or</code>_Bike`.</p>\n<h2>Abstract Factory</h2>\n<p>In Abstract Factory the client might not known what she wants, and how many objects she wants. This pattern provides an interface for creating families of related objects without the client having to specify the classes of the objects being created. In fact, the emphasys on families of related objects is the hallmark of the abstract factory pattern.</p>\n<p>Let’s start from the client code, namely the main function.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> inspect\n<span class=\"token keyword\">from</span> abc <span class=\"token keyword\">import</span> ABC<span class=\"token punctuation\">,</span> abstractmethod\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    triangles <span class=\"token operator\">=</span> give_me_some_polygons<span class=\"token punctuation\">(</span>TriangleFactory<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{} triangles'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>triangles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> triangle <span class=\"token keyword\">in</span> triangles<span class=\"token punctuation\">:</span>\n        print_polygon<span class=\"token punctuation\">(</span>triangle<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The function <code class=\"language-text\">give_me_some_polygons</code> is the <strong>interface</strong> between the client and the factory (in this example I wanted to be flexible and pass multiple abstract factories to this function, but this is just a detail). <code class=\"language-text\">give_me_some_polygons</code> calls the factory’s <code class=\"language-text\">make_polygon</code> method a random number of times, and returns a list of products to the client.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">give_me_some_polygons</span><span class=\"token punctuation\">(</span>factories<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Interface between the client and a Factory class.\n    Parameters\n    ----------\n    factories : list, or abc.ABCMeta\n        list of factory classes, or a factory class\n    color : str\n        color to pass to the manufacturing method of the factory class.\n    Returns\n    -------\n    products : list\n        a list of objects manufactured by the Factory classes specified\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>factories<span class=\"token punctuation\">,</span> <span class=\"token string\">'__len__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        factories <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>factories<span class=\"token punctuation\">]</span>\n\n    products <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> factory <span class=\"token keyword\">in</span> factories<span class=\"token punctuation\">:</span>\n        num <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            product <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span>make_polygon<span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span>\n            products<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> products</code></pre></div>\n<p>Let’s jump to <code class=\"language-text\">PolygonFactory</code>, the abstract factory at the top of the class hierarchy of factories. I decided to use the module <code class=\"language-text\">abc</code> and make <code class=\"language-text\">PolygonFactory</code> inherit from <code class=\"language-text\">ABC</code> so it’s clear that it’s an abstract class and cannot be instantiated. Since it’s a factory, it will manufacture some products. The list of products available for this class is a characteristic of the class itself, that’s why I used the <code class=\"language-text\">@classmethod</code> decorator.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PolygonFactory</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Basic abstract Factory class for making polygons (products).\n    This class has to be sublassed by a factory class that MUST implement\n    the \"products\" method.\n    A factory class can create many different polygon objects (products) without\n    exposing the instantiation logic to the client. Infact, since all methods of\n    this class are abstract, this class can't be instantiated at all! Also, each\n    subclass of PolygonFactory should implement the \"products\" method and keep\n    it abstract, so even that subclass can't be instatiated.\n    \"\"\"</span>\n    @<span class=\"token builtin\">classmethod</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">products</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Products that the factory can manufacture. Implement in subclass.\"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">make_polygon</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Instantiate a random polygon from all the ones that are available.\n        This method creates an instance of a product randomly chosen from all\n        products that the factory class can manufacture. The 'color' property of\n        the manufactured object is reassigned here. Then the object is returned.\n        Parameters\n        ----------\n        color : str\n            color to assign to the manufactured object. It replaces the color\n            assigned by the factory class.\n        Returns\n        -------\n        polygon : an instance of a class in cls.products()\n            polygon is the product manufactured by the factory class. It's one\n            of the products that the factory class can make.\n        \"\"\"</span>\n        product_name <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span>products<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        this_module <span class=\"token operator\">=</span> <span class=\"token builtin\">__import__</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n        polygon_class <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>this_module<span class=\"token punctuation\">,</span> product_name<span class=\"token punctuation\">)</span>\n        polygon <span class=\"token operator\">=</span> polygon_class<span class=\"token punctuation\">(</span>factory_name<span class=\"token operator\">=</span>cls<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> color <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            polygon<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color\n        <span class=\"token keyword\">return</span> polygon\n\n    @<span class=\"token builtin\">classmethod</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'black'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TriangleFactory</span><span class=\"token punctuation\">(</span>PolygonFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Abstract Factory class for making triangles.\"\"\"</span>\n    @<span class=\"token builtin\">classmethod</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">products</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">'_TriangleEquilateral'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_TriangleIsosceles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_TriangleScalene'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">QuadrilateralFactory</span><span class=\"token punctuation\">(</span>PolygonFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Abstract Factory class for making quadrilaterals.\"\"\"</span>\n    @<span class=\"token builtin\">classmethod</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">products</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'_Square'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_Rectangle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_ConvexQuadrilateral'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The only thing that a subclass of <code class=\"language-text\">PolygonFactory</code> has to do is to override the <code class=\"language-text\">products</code> method.\nIt’s very easy to extend the suite of products a factory can manufacture. For example, <code class=\"language-text\">TriangleFactory</code> contains a list of triangles that it can create. If you want to create a new type of triangle, you just have to create a new triangle class (e.g. <code class=\"language-text\">_TriangleRectangle</code>) and add it to the list of triangles in the products method.\nAlso, this design makes exchanging product families easy, because the specific class of the factory object appears only once in the application. The client is loosely coupled with the products, and if she needs a different family of products (e.g. quadrilaterals instead of triangles) she just needs to pass a different abstract factory to the <code class=\"language-text\">give_me_some_polygons</code> interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">quadrilaterals <span class=\"token operator\">=</span> give_me_some_polygons<span class=\"token punctuation\">(</span>QuadrilateralFactory<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{} quadrilaterals'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>quadrilaterals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> quadrilateral <span class=\"token keyword\">in</span> quadrilaterals<span class=\"token punctuation\">:</span>\n    print_polygon<span class=\"token punctuation\">(</span>quadrilateral<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The only portion of the code that knows what class to instantiate is the <code class=\"language-text\">make_polygon</code> method. It creates an instance of a product (e.g. <code class=\"language-text\">_Square</code>), randomly chosen from all the products that the factory class can manufacture, and returns it to the caller, which is the <code class=\"language-text\">give_me_some_polygons</code> function.</p>\n<p>There are only a couple of things still missing for the code to run: a function to print the polygons, and, obviously, all the product classes.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">print_polygon</span><span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">,</span> show_repr<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> show_hierarchy<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> show_repr<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">repr</span><span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> show_hierarchy<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>inspect<span class=\"token punctuation\">.</span>getmro<span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">_Polygon</span><span class=\"token punctuation\">(</span>ABC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Basic abstract class for polygons.\n\n    This class is private because the client should not try to instantiate it.\n    The instantiation process should be carried out by a Factory class.\n    A _Polygon subclass MUST override ALL _Polygon's abstract methods, otherwise\n    a TypeError will be raised as soon as we try to instantiate that subclass.\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> factory_name<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span>\n        self<span class=\"token punctuation\">.</span>_manufactured <span class=\"token operator\">=</span> factory_name\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'{} {} manufactured by {} (perimeter: {}; area: {})'</span>\\\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>manufactured<span class=\"token punctuation\">,</span>\n                    self<span class=\"token punctuation\">.</span>perimeter<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">property</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">family</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">property</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">property</span>\n    @abstractmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_color\n\n    @color<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">color</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_color <span class=\"token operator\">=</span> new_color\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">manufactured</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_manufactured\n\n    @manufactured<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">manufactured</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> factory_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_manufactured <span class=\"token operator\">=</span> factory_name\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Triangle</span><span class=\"token punctuation\">(</span>_Polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Basic concrete class for triangles.\"\"\"</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">family</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Triangles'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'a+b+c'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'base*height/2'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_TriangleEquilateral</span><span class=\"token punctuation\">(</span>_Triangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'3a'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_TriangleIsosceles</span><span class=\"token punctuation\">(</span>_Triangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'2a+b'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_TriangleScalene</span><span class=\"token punctuation\">(</span>_Triangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Quadrilateral</span><span class=\"token punctuation\">(</span>_Polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Basic concrete class for quadrilaterals.\"\"\"</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">family</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Quadrilaterals'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'a+b+c+d'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Bretschneider\\'s formula'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Square</span><span class=\"token punctuation\">(</span>_Quadrilateral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'4a'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'a*a'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Rectangle</span><span class=\"token punctuation\">(</span>_Quadrilateral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'2a+2b'</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'base*height'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_ConvexQuadrilateral</span><span class=\"token punctuation\">(</span>_Quadrilateral<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span></code></pre></div>\n<p>You need the code? Grab it <a href=\"https://github.com/jackaljack/design-patterns\">here</a>!</p>","frontmatter":{"title":"Factory Method and Abstract Factory in Python","date":"March 13, 2017","tags":["Python","Design Patterns"]}}},"pageContext":{"slug":"/factory-method-and-abstract-factory-in-python/","previous":{"fields":{"slug":"/strategy-pattern-in-python/"},"timeToRead":4,"frontmatter":{"title":"Strategy pattern in Python","path":"/strategy-pattern-in-python/"}},"next":{"fields":{"slug":"/multiply-your-python-unit-test-cases-with-ddt/"},"timeToRead":3,"frontmatter":{"title":"Multiply your Python Unit Test Cases with DDT","path":"/multiply-your-python-unit-test-cases-with-ddt/"}}}}