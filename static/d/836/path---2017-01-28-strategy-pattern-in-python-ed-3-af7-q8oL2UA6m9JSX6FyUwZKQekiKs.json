{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"a7f77d22-fa62-5446-b04a-0aa2302336f8 >>> MarkdownRemark","excerpt":"Strategy  (also known as  Policy ) is a behavioral design pattern that enables an algorithm’s behavior to be selected at runtime. All…","html":"<p><em>Strategy</em> (also known as <em>Policy</em>) is a behavioral design pattern that enables an algorithm’s behavior to be selected at runtime.</p>\n<p>All implemented behaviors are either classes, methods, or functions, and they are usually called <em>strategies</em>. The portion of code that decides which strategy to adopt is called <em>context</em>.</p>\n<p>Strategy follows two important principles:</p>\n<ul>\n<li>Open/closed principle: software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</li>\n<li>Inversion of Control principle: custom-written portions of a program (e.g. a method in a subclass) receive the flow of control from a generic framework (e.g. a base class).</li>\n</ul>\n<p>Following these two principles is extremely useful when you want to design a common interface (the <em>Closed</em> part of the Open/Closed principle), but allow for changes in the implementation details (the <em>Open</em> part of the Open/Closed principle). Every time you want to program a new implementation, you pass it to the common interface without altering anything in the interface code, and you plug the client code to the interface. This way the client code is <em>loosely coupled</em>, namely it is coupled only with an abstraction (i.e. the common interface), not with the concrete implementations (i.e. the various strategies).</p>\n<h2>How to implement a Strategy pattern in Python?</h2>\n<p>In programming languages like Java you can implement the Strategy pattern by creating a common (abstract) interface and subclassing it with a new class for each strategy. You can do the same in Python, like it’s done <a href=\"http://python-3-patterns-idioms-test.readthedocs.io/en/latest/FunctionObjects.html#strategy-choosing-the-algorithm-at-runtime\">here</a>. However, you can also use a leaner approach: create a single <code class=\"language-text\">Strategy</code> class and replace a method of that class, at runtime, with a different function based on a given context.</p>\n<p>Enough talking, let’s see some code!</p>\n<h2>The <code class=\"language-text\">Strategy</code> class</h2>\n<p>This class is the interface that the client code will use. It represents the <em>Closed</em> part of the Open/Closed principle, so it should not be modified.</p>\n<p>If the client code does not provide a function <code class=\"language-text\">func</code>, <code class=\"language-text\">Strategy</code> will use the default algorithm, namely <code class=\"language-text\">execute</code> in this example. </p>\n<p>In the <code class=\"language-text\">__init__</code> method we are taking advantage of the fact that Python supports <strong>higher order functions</strong>, namely we can pass a function as an argument to another function, and that Python functions are <strong>first class objects</strong>, so they can be assigned to variables, or stored in data structures (e.g. a dict).</p>\n<p>If the client provides a function <code class=\"language-text\">func</code>, this will be passed to the <code class=\"language-text\">__init__</code> method and assigned to the <code class=\"language-text\">execute</code> method. This means that the <code class=\"language-text\">execute</code> method will be redefined when the <code class=\"language-text\">Strategy</code> class is <em>instantiated</em>.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>Strategy</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span class=\"syntax--support syntax--type syntax--python\"><span>object</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span class=\"syntax--support syntax--function syntax--magic syntax--python\"><span>__init__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>func</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>None</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span>func</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>is</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>not</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--language syntax--python\"><span>None</span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>e</span><span>xecute</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span>func</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span>_</span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>_</span><span>_class__</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>,&nbsp;</span><span>func</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>else</span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span>_default</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>_</span><span>_class__</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>execute</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>Default&nbsp;method</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--constant syntax--character syntax--escape syntax--linefeed syntax--python\"><span>\\n</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>)</span></span></div></pre></div>\n<p>That’s cool, but there is a problem: <code class=\"language-text\">func</code> is <strong>just a function</strong>, it contains no reference to the instance it is bound to (like a Python method defined by using the <code class=\"language-text\">@staticmethod</code> decorator). Within the redefined <code class=\"language-text\">execute</code> you cannot access other methods or attributes of the instance.</p>\n<p>However with some Python magic and the help of the <code class=\"language-text\">types</code> module you can convert a normal function into a bound method, namely a function that contains a reference to the instance it is bound to.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--import syntax--python\"><span>import</span></span><span>&nbsp;</span><span>types</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--class syntax--python\"><span class=\"syntax--storage syntax--type syntax--class syntax--python\"><span>class</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--type syntax--class syntax--python\"><span>Strategy</span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--class syntax--inheritance syntax--python\"><span class=\"syntax--entity syntax--other syntax--inherited-class syntax--python\"><span class=\"syntax--support syntax--type syntax--python\"><span>object</span></span></span></span><span class=\"syntax--punctuation syntax--definition syntax--inheritance syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--class syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span class=\"syntax--support syntax--function syntax--magic syntax--python\"><span>__init__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>func</span></span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span class=\"syntax--constant syntax--language syntax--python\"><span>None</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span>func</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>is</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--logical syntax--python\"><span>not</span></span><span>&nbsp;</span><span class=\"syntax--constant syntax--language syntax--python\"><span>None</span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--punctuation syntax--whitespace syntax--comment syntax--leading syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=\"syntax--comment syntax--line syntax--number-sign syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--comment syntax--python\"><span>#</span></span><span>&nbsp;take&nbsp;a&nbsp;function,&nbsp;bind&nbsp;it&nbsp;to&nbsp;this&nbsp;instance,&nbsp;and&nbsp;replace&nbsp;the&nbsp;default&nbsp;bound&nbsp;method&nbsp;&#39;execute&#39;&nbsp;with&nbsp;this&nbsp;new&nbsp;bound&nbsp;method.</span><span>&nbsp;</span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>e</span><span>xecute</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>types</span><span>.</span><span>MethodType</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>func</span><span>,&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span>_</span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>_</span><span>_class__</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>,&nbsp;</span><span>func</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>else</span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span>_default</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>_</span><span>_class__</span><span>.</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>execute</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>Default&nbsp;method</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--constant syntax--character syntax--escape syntax--linefeed syntax--python\"><span>\\n</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>)</span></span></div></pre></div>\n<p>Now it’s time to implement some <em>strategies</em>.</p>\n<h2>Implement the <em>strategies</em></h2>\n<p>Let’s define a couple of <em>replacement strategies</em> for the default method <code class=\"language-text\">execute</code>. Don’t mind the <code class=\"language-text\">self</code> parameter, for now these ones are just regular functions. I decided to use <code class=\"language-text\">self</code> because I know that these functions, passed to the <code class=\"language-text\">Strategy</code>’s <code class=\"language-text\">__init__</code> method, will be bound to an instance of <code class=\"language-text\">Strategy</code> (this is done when the line <code class=\"language-text\">types.MethodType(func, self)</code> is executed).</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>execute_replacement1</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>Replacement1&nbsp;method</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--constant syntax--character syntax--escape syntax--linefeed syntax--python\"><span>\\n</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>execute_replacement2</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>self</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>Replacement2&nbsp;method</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>)</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--other syntax--python\"><span>print</span></span><span>(</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span class=\"syntax--constant syntax--other syntax--placeholder syntax--python\"><span>{}</span></span><span class=\"syntax--constant syntax--character syntax--escape syntax--linefeed syntax--python\"><span>\\n</span></span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>.</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>f</span><span>ormat</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span class=\"syntax--variable syntax--language syntax--python\"><span>self</span></span><span>.</span><span>n</span><span>ame</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span><span>)</span></span></div></pre></div>\n<h2>Select a strategy at runtime</h2>\n<p>In this simple example the part of the program which decides which strategy to use, namely the <em>context</em>, is the <code class=\"language-text\">main</code> function. As you can see, the three instances of <code class=\"language-text\">Strategy</code> are calling the same method.</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>main</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>s0</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>Strategy</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>s0</span><span>.</span><span>execute</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>s1</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>Strategy</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>execute_replacement1</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>s1</span><span>.</span><span>execute</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>s2</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>Strategy</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>execute_replacement2</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>s2</span><span>.</span><span>execute</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--control syntax--conditional syntax--python\"><span>if</span></span><span>&nbsp;</span><span class=\"syntax--support syntax--variable syntax--magic syntax--python\"><span>__name__</span></span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>==</span></span><span>&nbsp;</span><span class=\"syntax--string syntax--quoted syntax--single syntax--single-line syntax--python\"><span class=\"syntax--punctuation syntax--definition syntax--string syntax--begin syntax--python\"><span>&#39;</span></span><span>__main__</span><span class=\"syntax--punctuation syntax--definition syntax--string syntax--end syntax--python\"><span>&#39;</span></span></span><span>:</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--meta syntax--function-call syntax--python\"><span>main</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre></div>\n<p>This is the output:</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Default</span><span>&nbsp;</span><span>method</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Strategy_default</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Replacement1</span><span>&nbsp;</span><span>method</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Strategy_execute_replacement1</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Replacement2</span><span>&nbsp;</span><span>method</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--keyword syntax--operator syntax--comparison syntax--python\"><span>&gt;</span><span>&gt;</span><span>&gt;</span></span><span>&nbsp;</span><span>Strategy_execute_replacement2</span></span></div></pre></div>\n<h2>An even simpler Strategy</h2>\n<p>Sometimes you don’t even have to create a class, and you can achieve a similar result by assigning a function to an object, and then later calling that object. For example, this is also a Strategy:</p>\n<div class='midnight'><pre class=\"editor editor-colors\"><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>add</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>return</span></span><span>&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>+</span></span><span>&nbsp;</span><span>b</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function syntax--python\"><span class=\"syntax--storage syntax--type syntax--function syntax--python\"><span>def</span></span><span>&nbsp;</span><span class=\"syntax--entity syntax--name syntax--function syntax--python\"><span>subtract</span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function syntax--parameters syntax--python\"><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>a</span></span><span class=\"syntax--punctuation syntax--separator syntax--parameters syntax--python\"><span>,</span></span><span>&nbsp;</span><span class=\"syntax--variable syntax--parameter syntax--function syntax--python\"><span>b</span></span></span><span class=\"syntax--punctuation syntax--definition syntax--parameters syntax--end syntax--python\"><span>)</span></span><span class=\"syntax--punctuation syntax--section syntax--function syntax--begin syntax--python\"><span>:</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span class=\"syntax--keyword syntax--control syntax--statement syntax--python\"><span>return</span></span><span>&nbsp;</span><span>a</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--arithmetic syntax--python\"><span>-</span></span><span>&nbsp;</span><span>b</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>solve</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span>add</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>solve</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>&nbsp;</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span>solve</span><span>&nbsp;</span><span class=\"syntax--keyword syntax--operator syntax--assignment syntax--python\"><span>=</span></span><span>&nbsp;</span><span>subtract</span></span></div><div class=\"line\"><span class=\"syntax--source syntax--python\"><span class=\"syntax--meta syntax--function-call syntax--python\"><span>solve</span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--begin syntax--python\"><span>(</span></span><span class=\"syntax--meta syntax--function-call syntax--arguments syntax--python\"><span>a</span><span>,&nbsp;</span><span>b</span></span><span class=\"syntax--punctuation syntax--definition syntax--arguments syntax--end syntax--python\"><span>)</span></span></span></span></div></pre></div>\n<h2>Strategy VS Template Method</h2>\n<p>Strategy and <a href=\"http://www.giacomodebidda.com/blog/template-method-pattern-in-python/\">Template Method</a> are very similar and follow the same principles. The main difference is that in Template Method an implementation is chosen at <em>compile time</em> by <em>inheritance</em>, while in Strategy is chosen at <em>runtime</em> by <em>containment</em>. See also <a href=\"http://stackoverflow.com/a/669366\">here</a> to understand the difference between these two behavioral design patterns.</p>\n<p>You need the code? Grab it <a href=\"https://github.com/jackaljack/design-patterns\">here</a>!</p>","frontmatter":{"title":"Strategy pattern in Python","date":"January 28, 2017"}}},"pageContext":{"slug":"/2017-01-28-strategy-pattern-in-python/","previous":{"fields":{"slug":"/2017-01-27-template-method-pattern-in-python/"},"frontmatter":{"title":"Template Method pattern in Python"}},"next":{"fields":{"slug":"/2017-03-13-factory-method-and-abstract-factory-in-python/"},"frontmatter":{"title":"Factory Method and Abstract Factory in Python"}}}}