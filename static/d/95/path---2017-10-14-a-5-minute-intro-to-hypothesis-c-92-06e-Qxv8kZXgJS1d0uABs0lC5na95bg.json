{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda"}},"markdownRemark":{"id":"52fe106c-3df1-5eb3-a2d5-79e6f1c2e6b1","excerpt":"Let’s say you have a Python module called   where you have a function called   that you want to test. This function adds two numbers, so…","html":"<p>Let’s say you have a Python module called <code class=\"language-text\">example.py</code> where you have a function called <code class=\"language-text\">add_numbers</code> that you want to test.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># example.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p>This function adds two numbers, so among other things you might want to check that the commutative property holds for all the inputs that the function receives. You create a file called <code class=\"language-text\">test_example.py</code> and start writing a simple unit test to prove it.</p>\n<h2>A simple unit test</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> your_python_module<span class=\"token punctuation\">.</span>example <span class=\"token keyword\">import</span> add_numbers\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAddNumbers</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numers_is_commutative</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>add_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">4.56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s cool, but you actually didn’t prove that the commutative property holds in general. You have just proved that <em>for this specific case</em> such property holds.</p>\n<p>You realize that the combination of <code class=\"language-text\">1.23</code> and <code class=\"language-text\">4.56</code> is a very tiny subset of the entire input space of numbers that your function can receive, so you write more tests.</p>\n<h2>A common solution: write more test cases</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n\n<span class=\"token comment\"># more tests here...</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numers_is_commutative_another_case</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>add_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">0.789</span><span class=\"token punctuation\">,</span> <span class=\"token number\">321</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add_numbers<span class=\"token punctuation\">(</span><span class=\"token number\">321</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># more tests here...</span></code></pre></div>\n<p>Not a huge gain. You have just proved that <em>for these other specific cases</em> that you wrote the commutative property holds. And obviously you don’t want to write a million test cases by hand.</p>\n<p>Maybe you have heard about <a href=\"https://en.wikipedia.org/wiki/Fuzzing\">fuzzing</a>, and you want to use it to create random test cases every time you run the test.</p>\n<h2>A better solution: fuzzing and ddt</h2>\n<p>You can create a pair of random floats, so every time you run the test you have a new test case. That’s a bit dangerous though, because if you have a failure you cannot reproduce it easily.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> unittest\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAddNumbers</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numers_is_commutative</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10.0</span>\n        b <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10.0</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can also use a library called <a href=\"https://www.giacomodebidda.com/multiply-your-python-unit-test-cases-with-ddt/\">ddt</a> to generate many random test cases.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> ddt <span class=\"token keyword\">import</span> ddt<span class=\"token punctuation\">,</span> idata<span class=\"token punctuation\">,</span> unpack\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">float_pairs_generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num_test_cases <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_test_cases<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10.0</span>\n        b <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10.0</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n\n@ddt\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAddNumbers</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    @idata<span class=\"token punctuation\">(</span>float_pairs_generator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    @unpack\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_add_floats_ddt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here the <code class=\"language-text\">float_pairs_generator</code> generator function creates 100 random pairs of floats. With this trick you can multiply the number of test cases while keeping your tests easy to maintain.</p>\n<p>That’s definitely a step in the right direction, but if you think about it we are still testing some random combinations of numbers between 0.0 and 10.0 here. Not a very extensive portion of the input domain of the function <code class=\"language-text\">add_numbers</code>.</p>\n<p>You have two options:</p>\n<ol>\n<li>find a way to generate <em>domain objects</em> that your function can accept. In this case the domain objects are the floats that <code class=\"language-text\">add_numbers</code> can receive.</li>\n<li>use hypothesis</li>\n</ol>\n<p>I don’t know about you, but I’m going for the second one.</p>\n<h2>The best solution: Hypothesis</h2>\n<p>Here is how you write a test that checks that the commutative property holds for a pair of floats.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">from</span> hypothesis <span class=\"token keyword\">import</span> given\n<span class=\"token keyword\">from</span> hypothesis<span class=\"token punctuation\">.</span>strategies <span class=\"token keyword\">import</span> floats\n<span class=\"token keyword\">from</span> your_python_module<span class=\"token punctuation\">.</span>example <span class=\"token keyword\">import</span> add_numbers\n\n\n@given<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test_add_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When I ran this test I was shocked. It failed!</p>\n<p>WTF! How it that possible that this test fails, after I have tried 100 test cases with ddt?</p>\n<p>Luckily with hypothesis you can increase the verbosity level of your test by using the <code class=\"language-text\">@settings</code> decorator.</p>\n<p>Let’s say you also want to test a specific test case: <code class=\"language-text\">a == 1.23</code> and <code class=\"language-text\">b == 4.56</code>. For this you can use the <code class=\"language-text\">@example</code> decorator. This is nice because now your test provides some <em>documentation</em> to anyone who wants to use the <code class=\"language-text\">add_numbers</code> function, and at the same time you are testing a specific case that you know about or that might be particularly hard to hit.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">from</span> hypothesis <span class=\"token keyword\">import</span> given<span class=\"token punctuation\">,</span> example<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">,</span> Verbosity\n<span class=\"token keyword\">from</span> hypothesis<span class=\"token punctuation\">.</span>strategies <span class=\"token keyword\">import</span> floats\n<span class=\"token keyword\">from</span> your_python_module<span class=\"token punctuation\">.</span>example <span class=\"token keyword\">import</span> add_numbers\n\n\n@settings<span class=\"token punctuation\">(</span>verbosity<span class=\"token operator\">=</span>Verbosity<span class=\"token punctuation\">.</span>verbose<span class=\"token punctuation\">)</span>\n@example<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1.23</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">4.56</span><span class=\"token punctuation\">)</span>\n@given<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test_add_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Obviously the test fails again, but this time you get more insights about it.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Trying example: test_add_numbers(a=1.23, b=4.56)\nTrying example: test_add_numbers(a=0.0, b=nan)\nTraceback (most recent call last):\n  # Traceback here...\nAssertionError\nTrying example: test_add_numbers(a=0.0, b=nan)\nTraceback (most recent call last):\n  # Traceback here...\nAssertionError\nTrying example: test_add_numbers(a=0.0, b=1.0)\nTrying example: test_add_numbers(a=0.0, b=4293918720.0)\nTrying example: test_add_numbers(a=0.0, b=281406257233920.0)\nTrying example: test_add_numbers(a=0.0, b=7.204000185188352e+16)\nTrying example: test_add_numbers(a=0.0, b=inf)\n# more test cases...\nYou can add @seed(247616548810050264291730850370106354271) to this test to reproduce this failure.</code></pre></div>\n<p>That’s really helpful. You can see all the test case that were successful and the ones that caused a failure. You get also a <code class=\"language-text\">seed</code> that you can use to reproduce this very specific failure at a later time or on a different computer. This is so awesome.</p>\n<p>Anyway, why does this test fail? It fails because in Python <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> are valid floats, so the function <code class=\"language-text\">floats()</code> might create some test cases that have <code class=\"language-text\">a == nan</code> and/or <code class=\"language-text\">b == inf</code>.</p>\n<p>Are <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> valid inputs for your application? Maybe. It depends on your application.</p>\n<p>If you are absolutely sure that <code class=\"language-text\">add_numbers</code> will never receive a <code class=\"language-text\">nan</code> or a <code class=\"language-text\">inf</code> as inputs, you can write a test that never generates either <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code>. You just have to set <code class=\"language-text\">allow_nan</code> and <code class=\"language-text\">allow_infinity</code> to <code class=\"language-text\">False</code> in the <code class=\"language-text\">@given</code> decorator. Easy peasy.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">from</span> hypothesis <span class=\"token keyword\">import</span> given<span class=\"token punctuation\">,</span> example<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">,</span> Verbosity\n<span class=\"token keyword\">from</span> hypothesis<span class=\"token punctuation\">.</span>strategies <span class=\"token keyword\">import</span> floats\n<span class=\"token keyword\">from</span> your_python_module<span class=\"token punctuation\">.</span>example <span class=\"token keyword\">import</span> add_numbers\n\n\n@given<span class=\"token punctuation\">(</span>\n  a<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span>allow_nan<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> allow_infinity<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span>allow_nan<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> allow_infinity<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test_add_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But what if <code class=\"language-text\">add_numbers</code> could in fact receive <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code> as inputs (a much more realistic assumption). In this case the test should be able to generate <code class=\"language-text\">nan</code> or <code class=\"language-text\">inf</code>, your function should raise specific exceptions that you will have to handle somewhere else in your application, and the test should not consider <em>such specific exceptions</em> as failures.</p>\n<p>Here is how <code class=\"language-text\">example.py</code> might look:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># example.py</span>\n<span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NaNIsNotAllowed</span><span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InfIsNotAllowed</span><span class=\"token punctuation\">(</span>ValueError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> math<span class=\"token punctuation\">.</span>isnan<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> NaNIsNotAllowed<span class=\"token punctuation\">(</span><span class=\"token string\">'nan is not a valid input'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> math<span class=\"token punctuation\">.</span>isinf<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">or</span> math<span class=\"token punctuation\">.</span>isinf<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> InfIsNotAllowed<span class=\"token punctuation\">(</span><span class=\"token string\">'inf is not a valid input'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p>And here is how you write the test with hypothesis:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test_example.py</span>\n<span class=\"token keyword\">from</span> hypothesis <span class=\"token keyword\">import</span> given\n<span class=\"token keyword\">from</span> hypothesis<span class=\"token punctuation\">.</span>strategies <span class=\"token keyword\">import</span> floats\n<span class=\"token keyword\">from</span> your_python_module<span class=\"token punctuation\">.</span>example <span class=\"token keyword\">import</span> add_numbers<span class=\"token punctuation\">,</span> NaNIsNotAllowed<span class=\"token punctuation\">,</span> InfIsNotAllowed\n\n\n@given<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span>floats<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_add_numbers</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">assert</span> add_numbers<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> add_numbers<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>NaNIsNotAllowed<span class=\"token punctuation\">,</span> InfIsNotAllowed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        reject<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    test_add_numbers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This test will generate some <code class=\"language-text\">nan</code> and <code class=\"language-text\">inf</code> inputs, <code class=\"language-text\">add_numbers</code> will raise either <code class=\"language-text\">NaNIsNotAllowed</code> or <code class=\"language-text\">InfIsNotAllowed</code> and the test will catch these exceptions and reject them as test failures (i.e. the test case will be considered a success when either <code class=\"language-text\">NaNIsNotAllowed</code> or <code class=\"language-text\">InfIsNotAllowed</code> occurs).</p>\n<p>Can you really afford to reject <code class=\"language-text\">nan</code> as an input value for <code class=\"language-text\">add_numbers</code>? Maybe not. Let’s say your code needs to sum two samples in a time series, and one sample of the time series is missing: <code class=\"language-text\">nan</code> would be a perfectly valid input for <code class=\"language-text\">add_numbers</code> in such case.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://hypothesis.works/articles/what-is-property-based-testing/\">What is Property Based Testing?</a></li>\n<li><a href=\"http://hypothesis.works/articles/getting-started-with-hypothesis/\">Getting started with Hypothesis</a></li>\n<li><a href=\"http://hypothesis.works/articles/anatomy-of-a-test/\">Anatomy of a Hypothesis Based Test</a></li>\n<li><a href=\"http://hypothesis.works/articles/incremental-property-based-testing/\">Evolving toward property-based testing with Hypothesis</a></li>\n</ul>","frontmatter":{"title":"A 5 minute Intro to Hypothesis","date":"October 14, 2017"}}},"pageContext":{"slug":"/2017-10-14-a-5-minute-intro-to-hypothesis/","previous":{"fields":{"slug":"/2017-10-13-how-to-import-d3-plugins-with-webpack/"},"frontmatter":{"title":"How to import d3 plugins with Webpack"}},"next":{"fields":{"slug":"/2017-10-31-how-to-get-started-with-regl-and-webpack/"},"frontmatter":{"title":"How to get started with regl and Webpack"}}}}