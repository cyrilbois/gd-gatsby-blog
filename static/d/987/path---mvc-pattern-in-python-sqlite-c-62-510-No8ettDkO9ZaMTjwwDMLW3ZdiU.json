{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"2c341704-5445-5af9-a72a-af10462705aa","excerpt":"This is the  second  article of a series of blog posts related to the MVC pattern. Last time we saw how to divide business logic…","timeToRead":12,"html":"<p>This is the <strong>second</strong> article of a series of blog posts related to the MVC pattern. Last time we saw how to divide business logic, presentation layer and user interaction into three components: Model, View and Controller.</p>\n<p>This time we are going to replace the Model and implement a persistance layer with a SQLite database.</p>\n<p>Here are the links to the other articles in the series:</p>\n<ol>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-introduction-and-basicmodel/\">MVC pattern in Python: Introduction and BasicModel</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-sqlite/\">MVC pattern in Python: SQLite</a></li>\n<li><a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-dataset/\">MVC pattern in Python: Dataset</a></li>\n</ol>\n<p><em>All code was written in Python 3.5. If you are using Python 2.7 you should be able to run it with a few minor changes.</em></p>\n<hr>\n<p>Table of contents</p>\n<ol>\n<li><a href=\"#intro\">Introduction</a></li>\n<li><a href=\"#crud\">CRUD</a></li>\n<li><a href=\"#model\">Model</a></li>\n<li><a href=\"#view-controller\">View and Controller</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<p><a name=\"intro\"><h2>Introduction</h2></a>\nFirst of all, if you haven’t read my previous article in the MVC series, I suggest you to read that one first, otherwise many of the things here will not make much sense. Moreover, you will need the code for the <code class=\"language-text\">View</code> and the <code class=\"language-text\">Controller</code>.</p>\n<p><a name=\"crud\"><h2>CRUD</h2></a>\nLet’s review the inventory of a small grocery store. A typical product list would look like this:</p>\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th>Name</th>\n                <th>Price</th>\n                <th>Quantity</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Bread</td>\n                <td>0.5</td>\n                <td>20</td>\n            </tr>\n            <tr>\n                <td>Milk</td>\n                <td>1.0</td>\n                <td>10</td>\n            </tr>\n            <tr>\n                <td>Wine</td>\n                <td>10.0</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<p>In this article we will use SQLite and store all these products in a database table.</p>\n<p>As we did last time, let’s implement each CRUD functionality in the simplest way possible. Create a python script and call it <code class=\"language-text\">sqlite_backend.py</code>.\nActually, even before writing any code for CRUD operations, we have to write some code to handle database connections.</p>\n<p>A great feature of SQLite is that you can create in-memory databases. An in-memory database runs in the RAM of your computer, so it lets you develop and test your code much faster than a “normal” database.</p>\n<p>A “normal”, physical SQLite database is just a file, and this makes using SQLite a joy: even if you mess up, you can simply delete your <code class=\"language-text\">.db</code> file and start over.</p>\n<p>The code to establish a connection to SQLite3 is pretty straightforward and doesn’t change either if you are using an in-memory database or a physical one.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sqlite3\n\nDB_name <span class=\"token operator\">=</span> <span class=\"token string\">'myDB'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">connect_to_db</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Connect to a sqlite DB. Create the database if there isn't one yet.\n\n    Open a connection to a SQLite DB (either a DB file or an in-memory DB).\n    When a database is accessed by multiple connections, and one of the\n    processes modifies the database, the SQLite database is locked until that\n    transaction is committed.\n\n    Parameters\n    ----------\n    db : str\n        database name (without .db extension). If None, create an In-Memory DB.\n\n    Returns\n    -------\n    connection : sqlite3.Connection\n        connection object\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> db <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        mydb <span class=\"token operator\">=</span> <span class=\"token string\">':memory:'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New connection to in-memory SQLite DB...'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        mydb <span class=\"token operator\">=</span> <span class=\"token string\">'{}.db'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'New connection to SQLite DB...'</span><span class=\"token punctuation\">)</span>\n    connection <span class=\"token operator\">=</span> sqlite3<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>mydb<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> connection</code></pre></div>\n<p>As you can see, <code class=\"language-text\">connect_to_db</code> returns a <code class=\"language-text\">connection</code>, an object tha you will need to pass as argument to each database operation.</p>\n<p>Let’s say that you have the following requirement for your application: each database operation should be able to open a connection if there isn’t one already. How would you do it?</p>\n<p>You could call <code class=\"language-text\">connect_to_db</code> at the beginning of each database operation, but this would open a new database connection for each operation, every time. This doesn’t sound too smart, and you should try to reuse a connection that already exists.</p>\n<p>You could place a <code class=\"language-text\">try/except</code> block at the beginning of each database operation, but you would end up with a lot of ugly, <a href=\"http://stackoverflow.com/a/2298357\">duplicate code</a>.</p>\n<p>Luckily, in Python there is a better alternative: a decorator.\nThe <code class=\"language-text\">try/except</code> block in the code below is dead simple. We just try a very fast query. If it succeeds, it means that there is an open connection that we can use. If it fails, it means that there is no connection or that the connection is closed, and we have to open a new one.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n<span class=\"token keyword\">from</span> sqlite3 <span class=\"token keyword\">import</span> OperationalError<span class=\"token punctuation\">,</span> IntegrityError<span class=\"token punctuation\">,</span> ProgrammingError\n\n\n<span class=\"token comment\"># TODO: use this decorator to wrap commit/rollback in a try/except block ?</span>\n<span class=\"token comment\"># see http://www.kylev.com/2009/05/22/python-decorators-and-database-idioms/</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Decorator to (re)open a sqlite database connection when needed.\n\n    A database connection must be open when we want to perform a database query\n    but we are in one of the following situations:\n    1) there is no connection\n    2) the connection is closed\n\n    Parameters\n    ----------\n    func : function\n        function which performs the database query\n\n    Returns\n    -------\n    inner func : function\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">inner_func</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># I don't know if this is the simplest and fastest query to try</span>\n            conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">'SELECT name FROM sqlite_temp_master WHERE type=\"table\";'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>AttributeError<span class=\"token punctuation\">,</span> ProgrammingError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            conn <span class=\"token operator\">=</span> connect_to_db<span class=\"token punctuation\">(</span>DB_name<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> inner_func</code></pre></div>\n<p>A SQLite database will close a connection automatically after a certain <em>timeout</em> (the default <a href=\"https://docs.python.org/2/library/sqlite3.html#sqlite3.connect\">timeout</a> is 5s). However, sometimes you may want to disconnect from a database explicitly.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">disconnect_from_db</span><span class=\"token punctuation\">(</span>db<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> conn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> db <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> DB_name<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You are trying to disconnect from a wrong DB\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> conn <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There is still another thing you need to do before starting to write code to implement any CRUD operation: you need a table!</p>\n<p>Your table must contain data about <code class=\"language-text\">name</code>, <code class=\"language-text\">price</code> and <code class=\"language-text\">quantity</code> of every single item. Given the dynamic nature of the Python language, you don’t have to assign a type to any of these three attributes. However, most likely <code class=\"language-text\">name</code> would be a <code class=\"language-text\">str</code>, <code class=\"language-text\">price</code> a <code class=\"language-text\">float</code> and <code class=\"language-text\">quantity</code> an <code class=\"language-text\">int</code>.</p>\n<p>In SQLite there are both <a href=\"https://sqlite.org/datatype3.html\">“storage classes” and “datatypes”</a>, but for the most part, “storage class” is indistinguishable from “datatype” and the two terms can be used interchangeably. So, which storage class should you assign to <code class=\"language-text\">name</code>, <code class=\"language-text\">price</code>, <code class=\"language-text\">quantity</code>? I think a good choice is: <code class=\"language-text\">TEXT</code>, <code class=\"language-text\">REAL</code> and <code class=\"language-text\">INTEGER</code>, respectively.</p>\n<p><em>Note that here we are defining a table, so we use a [Data Definition Language](<a href=\"https://en.wikipedia.org/wiki/Data\">https://en.wikipedia.org/wiki/Data</a></em>definition<em>language) and <a href=\"http://stackoverflow.com/questions/730621/do-ddl-statements-always-give-you-an-implicit-commit-or-can-you-get-an-implicit\">there is no need to explicitly commit</a></em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_table</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">'CREATE TABLE {} (rowid INTEGER PRIMARY KEY AUTOINCREMENT,'</span> \\\n          <span class=\"token string\">'name TEXT UNIQUE, price REAL, quantity INTEGER)'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> OperationalError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I’m definitely not an expert in databases, but something which is widely known is that an attacker could insert malicious SQL statements into an entry field of your application, a vulerability called <a href=\"https://en.wikipedia.org/wiki/SQL_injection\">SQL injection</a>. This is just a toy application and I don’t think it makes sense discussing this issue, however some time ago I found a nice snippet to try to prevent SQL injection (actually I don’t remember where I found it, probably Stack Overflow).</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">scrub</span><span class=\"token punctuation\">(</span>input_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Clean an input string (to prevent SQL injection).\n\n    Parameters\n    ----------\n    input_string : str\n\n    Returns\n    -------\n    str\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>k <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> input_string <span class=\"token keyword\">if</span> k<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can use the <code class=\"language-text\">scrub</code> function to clean the <code class=\"language-text\">table_name</code> string.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_table</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">'CREATE TABLE {} (rowid INTEGER PRIMARY KEY AUTOINCREMENT,'</span> \\\n          <span class=\"token string\">'name TEXT UNIQUE, price REAL, quantity INTEGER)'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> OperationalError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now that we finally have a table, let’s start to implement the CRUD functionalities.</p>\n<p>Let’s start with the <em>Create</em> functionality.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO {} ('name', 'price', 'quantity') VALUES (?, ?, ?)\"</span>\\\n        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> IntegrityError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemAlreadyStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'{}: \"{}\" already stored in table \"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_many</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO {} ('name', 'price', 'quantity') VALUES (?, ?, ?)\"</span>\\\n        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    entries <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">:</span>\n        entries<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'quantity'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        conn<span class=\"token punctuation\">.</span>executemany<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> entries<span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> IntegrityError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}: at least one in {} was already stored in table \"{}\"'</span>\n              <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, <em>Create</em> operations don’t return anything. They just insert data into the database.</p>\n<p>Let’s now add a <em>Read</em> functionality, but first there is a small thing to do: if you remember, last time each item was represented as a Python <code class=\"language-text\">dict</code>;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>this time, each query that returns an item will return a <code class=\"language-text\">tuple</code>, and you will need to convert such tuple into a dict.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">tuple_to_dict</span><span class=\"token punctuation\">(</span>mytuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mydict <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    mydict<span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mytuple<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    mydict<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mytuple<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    mydict<span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mytuple<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    mydict<span class=\"token punctuation\">[</span><span class=\"token string\">'quantity'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mytuple<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> mydict</code></pre></div>\n<p>In a SQL database, <em>Read</em> operations are performed with <code class=\"language-text\">SELECT</code> statements.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> item_name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    item_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">)</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT * FROM {} WHERE name=\"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">,</span> item_name<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>fetchone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> result <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> tuple_to_dict<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t read \"{}\" because it\\'s not stored in table \"{}\"'</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>item_name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">select_all</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT * FROM {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span>\n    results <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> tuple_to_dict<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let’s now add the <em>Update</em> operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql_check <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT EXISTS(SELECT 1 FROM {} WHERE name=? LIMIT 1)'</span>\\\n        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql_update <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE {} SET price=?, quantity=? WHERE name=?'</span>\\\n        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql_check<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># we need the comma</span>\n    result <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>fetchone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        c<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql_update<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t update \"{}\" because it\\'s not stored in table \"{}\"'</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And finally, <em>Delete</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n@connect\n<span class=\"token keyword\">def</span> <span class=\"token function\">delete_one</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql_check <span class=\"token operator\">=</span> <span class=\"token string\">'SELECT EXISTS(SELECT 1 FROM {} WHERE name=? LIMIT 1)'</span>\\\n        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    table_name <span class=\"token operator\">=</span> scrub<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    sql_delete <span class=\"token operator\">=</span> <span class=\"token string\">'DELETE FROM {} WHERE name=?'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql_check<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># we need the comma</span>\n    result <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>fetchone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        c<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql_delete<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># we need the comma</span>\n        conn<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> mvc_exc<span class=\"token punctuation\">.</span>ItemNotStored<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Can\\'t delete \"{}\" because it\\'s not stored in table \"{}\"'</span>\n            <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let’s put everything together and see if these CRUD operations are correct!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># sqlite_backend.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    table_name <span class=\"token operator\">=</span> <span class=\"token string\">'items'</span>\n    conn <span class=\"token operator\">=</span> connect_to_db<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># in-memory database</span>\n    <span class=\"token comment\"># conn = connect_to_db(DB_name)  # physical database (i.e. a .db file)</span>\n\n    create_table<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token punctuation\">)</span>\n\n    my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># CREATE</span>\n    insert_many<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> my_items<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span>\n    insert_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'beer'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to insert an object already stored we get an ItemAlreadyStored</span>\n    <span class=\"token comment\"># exception</span>\n    <span class=\"token comment\"># insert_one(conn, 'milk', price=1.0, quantity=3, table_name='items')</span>\n\n    <span class=\"token comment\"># READ</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT milk'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT all'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_all<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to select an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print(select_one(conn, 'pizza', table_name='items'))</span>\n\n    <span class=\"token comment\"># conn.close()  # the decorator @connect will reopen the connection</span>\n\n    <span class=\"token comment\"># UPDATE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE bread, SELECT bread'</span><span class=\"token punctuation\">)</span>\n    update_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to update an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('UPDATE pizza')</span>\n    <span class=\"token comment\"># update_one(conn, 'pizza', price=1.5, quantity=5, table_name='items')</span>\n\n    <span class=\"token comment\"># DELETE</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE beer, SELECT all'</span><span class=\"token punctuation\">)</span>\n    delete_one<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token string\">'beer'</span><span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>select_all<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># if we try to delete an object not stored we get an ItemNotStored exception</span>\n    <span class=\"token comment\"># print('DELETE fish')</span>\n    <span class=\"token comment\"># delete_one(conn, 'fish', table_name='items')</span>\n\n    <span class=\"token comment\"># save (commit) the changes</span>\n    <span class=\"token comment\"># conn.commit()</span>\n\n    <span class=\"token comment\"># close connection</span>\n    conn<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can execute the <code class=\"language-text\">main</code> function with this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">conn <span class=\"token operator\">=</span> connect_to_db<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># in-memory database</span></code></pre></div>\n<p>or this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">conn <span class=\"token operator\">=</span> connect_to_db<span class=\"token punctuation\">(</span>DB_name<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># physical database (i.e. a .db file)</span></code></pre></div>\n<p>Th former creates an in-memory database, so it’s faster and does not create any file. The latter creates a <code class=\"language-text\">.db</code> file that you can explore with tools like <a href=\"http://sqlitebrowser.org/\">DB Browser for SQLite</a> or even online viewers like <a href=\"http://inloop.github.io/sqlite-viewer/\">this one</a>.</p>\n<p><a name=\"model\"><h2>Model</h2></a>\nNow that all CRUD operations are implemented as simple functions, creating a class for a Model that uses a SQLite database as persistence layer is pretty straightforward.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># model_view_controller.py</span>\n<span class=\"token keyword\">import</span> sqlite_backend\n<span class=\"token keyword\">import</span> mvc_exceptions <span class=\"token keyword\">as</span> mvc_exc\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelSQLite</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> application_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> <span class=\"token string\">'product'</span>\n        self<span class=\"token punctuation\">.</span>_connection <span class=\"token operator\">=</span> sqlite_backend<span class=\"token punctuation\">.</span>connect_to_db<span class=\"token punctuation\">(</span>sqlite_backend<span class=\"token punctuation\">.</span>DB_name<span class=\"token punctuation\">)</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>create_table<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_item_type<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>create_items<span class=\"token punctuation\">(</span>application_items<span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">connection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_connection\n\n    @<span class=\"token builtin\">property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_item_type\n\n    @item_type<span class=\"token punctuation\">.</span>setter\n    <span class=\"token keyword\">def</span> <span class=\"token function\">item_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> new_item_type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_item_type <span class=\"token operator\">=</span> new_item_type\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>insert_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">create_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>insert_many<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> sqlite_backend<span class=\"token punctuation\">.</span>select_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> sqlite_backend<span class=\"token punctuation\">.</span>select_all<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>update_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete_item</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>delete_one<span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> table_name<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>item_type<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"view-controller\"><h2>View and Controller</h2></a>\nAs I said last time, <code class=\"language-text\">View</code> and <code class=\"language-text\">Controller</code> are completely <strong>decoupled</strong> from the <code class=\"language-text\">Model</code> (and between themselves), so you don’t need to change anything in their implementation. If you need the code for these classes, see the <a href=\"http://www.giacomodebidda.com/blog/mvc-pattern-in-python-introduction-and-basicmodel/\">first article</a> in the series.</p>\n<p>The only thing to do is to plug the <code class=\"language-text\">ModelSQLite</code> in the <code class=\"language-text\">Controller</code>.</p>\n<p>Here is a snippet to test our small MVC application:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\n    my_items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'wine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'price'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'quantity'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    c <span class=\"token operator\">=</span> Controller<span class=\"token punctuation\">(</span>ModelSQLite<span class=\"token punctuation\">(</span>my_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> View<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span>bullet_points<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>insert_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>insert_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>show_item<span class=\"token punctuation\">(</span><span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span><span class=\"token string\">'milk'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>update_item<span class=\"token punctuation\">(</span><span class=\"token string\">'ice cream'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">=</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span><span class=\"token string\">'fish'</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>delete_item<span class=\"token punctuation\">(</span><span class=\"token string\">'bread'</span><span class=\"token punctuation\">)</span>\n\n    c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># we close the current sqlite database connection explicitly</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> ModelSQLite<span class=\"token punctuation\">:</span>\n        sqlite_backend<span class=\"token punctuation\">.</span>disconnect_from_db<span class=\"token punctuation\">(</span>\n            sqlite_backend<span class=\"token punctuation\">.</span>DB_name<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># the sqlite backend understands that it needs to open a new connection</span>\n        c<span class=\"token punctuation\">.</span>show_items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a name=\"conclusion\"><h2>Conclusion</h2></a>\nIn this article we replaced <code class=\"language-text\">ModelBasic</code> with <code class=\"language-text\">ModelSQLite</code>. Thanks to the SQLite database we gained a persistence layer for our application, and thanks to the modular architecture of the MVC pattern we kept the same functionality without having to change a single line of code in the <code class=\"language-text\">View</code> or in the <code class=\"language-text\">Controller</code>.</p>\n<p>In the next article we will use a very cool package called <a href=\"https://dataset.readthedocs.io/en/latest/\">Dataset</a> to get rid of all these ugly SQL statements! We will be able to simplify all these database operations and make the code more pythonic.</p>","frontmatter":{"title":"MVC pattern in Python: SQLite","date":"April 10, 2017"}}},"pageContext":{"slug":"/mvc-pattern-in-python-sqlite/","previous":{"fields":{"slug":"/mvc-pattern-in-python-introduction-and-basicmodel/"},"timeToRead":14,"frontmatter":{"title":"MVC pattern in Python: Introduction and BasicModel","path":"/mvc-pattern-in-python-introduction-and-basicmodel/"}},"next":{"fields":{"slug":"/mvc-pattern-in-python-dataset/"},"timeToRead":12,"frontmatter":{"title":"MVC pattern in Python: Dataset","path":"/mvc-pattern-in-python-dataset/"}}}}