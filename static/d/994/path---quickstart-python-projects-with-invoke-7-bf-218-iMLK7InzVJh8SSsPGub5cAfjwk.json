{"data":{"site":{"siteMetadata":{"title":"Giacomo Debidda","author":"Giacomo Debidda","description":"Giacomo Debidda's Personal Blog"}},"markdownRemark":{"id":"80d9c294-3fb9-5286-b058-0131ea329f2e","excerpt":"Every time I want to try out a new Python library or develop a small weekend project I need to create a git repository and configure a…","timeToRead":6,"html":"<p>Every time I want to try out a new Python library or develop a small weekend project I need to create a git repository and configure a virtual environment. Most of the time I forget one passage or another and I end up losing a few minutes searching on Google how to perform some trivial task. Not fun.</p>\n<p>Luckily, there are several tools to automate these boring, repetivive tasks. I know a little bit of <a href=\"https://www.gnu.org/software/make/\">make</a> and <a href=\"http://www.fabfile.org/\">Fabric</a>, but I came across <a href=\"http://docs.pyinvoke.org/en/latest/index.html\">Invoke</a> and I wanted to try it.</p>\n<p>I will show you how to automate the creation and the initial configuration of a basic Python project with Invoke.</p>\n<p>According to the documentation, Invoke is a task execution tool &#x26; library that provides a clean, high level API for unning shell commands and defining/organizing task functions from a <code class=\"language-text\">tasks.py</code> file. It’s in a very early-stage development (version <code class=\"language-text\">0.20.3</code> at the time of this writing) but the documentation is pretty good.</p>\n<p>I wanted to create a series of tasks – well, one basically – that could automate the process of:</p>\n<ol>\n<li>create a directory and initialize a git repository inside</li>\n<li>setup a virtual environment a few dependencies (pylint, flake8)</li>\n<li>configure the virtual environment for Visual Studio Code</li>\n<li>configure the virtual environment for PyCharm</li>\n</ol>\n<p>I didn’t manage to automate step 4, but the first three were fairly easy to deal with.</p>\n<p><em>Note: if you want to follow along, install invoke with <code class=\"language-text\">pip install invoke</code> and create a <code class=\"language-text\">tasks.py</code> file.</em></p>\n<p>Let’s start by importing invoke and defining a very simple task.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> invoke <span class=\"token keyword\">import</span> task\n\n<span class=\"token comment\"># location where I keep all of my repositories</span>\nREPOS <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n@task\n<span class=\"token keyword\">def</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi! I will create a new Project in {}...'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>REPOS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can see that the function <code class=\"language-text\">greet</code> is decorated with the decorator <code class=\"language-text\">@task</code>, which makes it an <code class=\"language-text\">invoke</code> task. Every invoke task has a <a href=\"http://docs.pyinvoke.org/en/latest/getting_started.html#why-context\">Context</a> and can be invoked from the terminal with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">invoke &lt;task-name&gt;</code></pre></div>\n<p>Let’s create anothere simple task, and use the Context this time.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">@task\n<span class=\"token keyword\">def</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    msg <span class=\"token operator\">=</span> <span class=\"token string\">'In PyCharm, setup the virtualenv for your project in:\\n'</span> \\\n          <span class=\"token string\">'Settings > Project > Project Interpreter > gear icon > Add Local'</span> \\\n          <span class=\"token string\">'\\nThe virtualenv should be located at:\\n'</span> \\\n          <span class=\"token string\">'~/.virtualenvs/&lt;virtualenv created by pipenv>'</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token string\">'echo {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The Context is the primary API endpoint, and encapsulates information about the state. As you can see, with Context.run you can run shell commands.</p>\n<p>You can declare tasks to be executed before and/or after a task. You can also define a help for any particular task. If present, you can read the help message by typing <code class=\"language-text\">invoke &lt;task-name&gt; --help</code>.</p>\n<p>Here is the task that I’m currently using when I want to start a new Python project.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">@task<span class=\"token punctuation\">(</span>\n    pre<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>greet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    post<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>message<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Name of the directory to create. A git repository will be '</span>\n                <span class=\"token string\">'initialized (default: my-repo)'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'virtualenv'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'If True, use pipenv to create a Python 3.6 virtualenv '</span>\n                      <span class=\"token string\">'and lock the dependencies (default: False)'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">mkrepo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'my-repo'</span><span class=\"token punctuation\">,</span> virtualenv<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Create git repo and make Initial Commit.\n\n    Parameters\n    ----------\n    ctx : Context\n    name : str\n    virtualenv : bool\n\n    Examples\n    --------\n    invoke mkrepo -n my-repo -v\n    \"\"\"</span>\n    repo_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>REPOS<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">)</span>\n    _setup_git_repo<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> virtualenv<span class=\"token punctuation\">:</span>\n        _setup_pipenv<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span></code></pre></div>\n<p>All those underscores in front of the function’s name are just there to remember the user that he should not call those functions directly.</p>\n<p>The list of available tasks can be shown with these commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">invoke --list  # or...\ninvoke -l</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jack@ThinkJack:~/Repos/invoke-tasks(master)$ invoke -l\nAvailable tasks:\n\n  greet\n  message\n  mkrepo    Create git repo and make Initial Commit.</code></pre></div>\n<p>The task <code class=\"language-text\">mkrepo</code> calls a few functions. As you can see down here, these are just functions, not tasks, because I don’t want to expose them to the invoke command-line interface. They still need a Context to run shell commands, so I need to pass the Context to them.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_setup_git_repo</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Initialize git repository and make Initial Commit.\n\n    Parameters\n    ----------\n    ctx : Context\n    repo_dir : str\n    \"\"\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n    cd {} ;\n    git init ;\n    echo \".idea/\" > .gitignore ;\n    touch README.md ;\n    git add . ;\n    git commit -m \"Initial Commit\"\n    \"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'.vscode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I recently started to use <a href=\"https://www.giacomodebidda.com/pipenv/\">Pipenv</a>. Here is a function to configure a Python virtual environment for a new project.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_setup_pipenv</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Create a python 3.6 virtual environment with pipenv, lock and commit.\n\n    Parameters\n    ----------\n    ctx : Context\n    repo_dir : str\n    \"\"\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">'cd {} ;'</span> \\\n          <span class=\"token string\">'pipenv --python python3.6 ;'</span> \\\n          <span class=\"token string\">'pipenv install --dev pylint ;'</span> \\\n          <span class=\"token string\">'pipenv install --dev flake8 ;'</span> \\\n          <span class=\"token string\">'pipenv lock'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">'cd {} ;'</span> \\\n          <span class=\"token string\">'git add Pipfile Pipfile.lock ;'</span> \\\n          <span class=\"token string\">'git commit -m \"Lock dependencies\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    _create_python_module<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span>\n    _create_vscode_settings<span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I also wanted to create a simple <code class=\"language-text\">example.py</code> file, just to save a few characters when I start writing code. That thing beginning with <code class=\"language-text\">&lt;&lt;EOF</code> and ending with <code class=\"language-text\">EOF</code> is a <a href=\"http://tldp.org/LDP/abs/html/here-docs.html\">Here Document</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_create_python_module</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Create a small python module.\n\n    Parameters\n    ----------\n    ctx : Context\n    repo_dir : str\n    \"\"\"</span>\n    pymodule_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'example.py'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># create example.py with a Here Document</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n    cat > {pymodule_path} &lt;&lt;EOF\ndef main():\n    print('before breakpoint')\n    print('place breakpoint here')\n\n\nif __name__ == '__main__':\n    main()\nEOF\n\"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pymodule_path<span class=\"token operator\">=</span>pymodule_path<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># in alternative, create a Here Document on a single line and use .format</span>\n    <span class=\"token comment\"># to replace newlines and indentations</span>\n    <span class=\"token comment\"># cat > {pymodule_path} &lt;&lt;EOF{newline}def main():{newline}{indent}print('example'){newline}EOF\"\"\".format(newline='\\n', indent='    ', pymodule_path=pymodule_path)</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I use Visual Studio Code a lot, so I want the path to the Python interpreter to be configured as soon as I start a new project. This can be done by create a <code class=\"language-text\">settings.json</code> for the <strong>Workspace settings</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_create_vscode_settings</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> repo_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Create Workspace settings to use in Visual Studio Code.\n\n    Parameters\n    ----------\n    ctx : Context\n    repo_dir : str\n    \"\"\"</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token string\">'cd {} ;'</span> \\\n          <span class=\"token string\">'pipenv --venv'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># last character of stdout is a newline, so we strip it out</span>\n    venv_path <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    json_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>repo_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'.vscode'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'settings.json'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># create settings.json with a Here Document</span>\n    cmd <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"\n    cat > {json_path} &lt;&lt;EOF\n// Place your settings in this file to overwrite default and user settings.\n{{\n    \"editor.rulers\": [80, 100],\n    \"python.pythonPath\": \"{venv_path}\"\n}}\nEOF\n\"\"\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>json_path<span class=\"token operator\">=</span>json_path<span class=\"token punctuation\">,</span> venv_path<span class=\"token operator\">=</span>venv_path<span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>Note: Oviously you don’t need to set the <code class=\"language-text\">editor.rules</code>, but since I use it in all of my projects I decided to include it.</em></p>\n<h2>Conclusion</h2>\n<p>With Invoke you can also execute shell commands with <code class=\"language-text\">sudo</code>, create <a href=\"http://docs.pyinvoke.org/en/latest/getting_started.html#creating-namespaces\">namespaces</a> and use a <a href=\"http://docs.pyinvoke.org/en/latest/concepts/testing.html#use-mockcontext\">MockContext</a>. I didn’t need these features this time, but I think I will try them for more complex tasks. I really liked the clean API and the easy of use of Invoke.</p>","frontmatter":{"title":"Quickstart Python projects with Invoke","date":"August 07, 2017","tags":["Python","Virtual environments","Invoke"]}}},"pageContext":{"slug":"/quickstart-python-projects-with-invoke/","previous":{"fields":{"slug":"/how-to-write-a-killer-readme/"},"timeToRead":9,"frontmatter":{"title":"How to write a killer README","path":"/how-to-write-a-killer-readme/"}},"next":{"fields":{"slug":"/sklearn-pandas/"},"timeToRead":9,"frontmatter":{"title":"sklearn-pandas","path":"/sklearn-pandas/"}}}}